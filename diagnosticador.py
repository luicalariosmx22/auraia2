import os
import json
import requests
import openai
import twilio
from twilio.rest import Client
from utils.config_helper import cargar_configuracion

# Funci√≥n de verificaci√≥n de archivos
def verificar_archivos():
    archivos_essenciales = [
        'webhook.py', 'bot_data.json', 'logs_errores.json', 'config.json', 'panel_errores.html', 'login.html'
    ]
    for archivo in archivos_essenciales:
        if not os.path.exists(archivo):
            print(f"‚ùå El archivo {archivo} NO se encuentra en el proyecto.")
        else:
            print(f"‚úÖ El archivo {archivo} est√° presente.")

# Funci√≥n de verificaci√≥n de Twilio
def verificar_twilio():
    try:
        account_sid = os.getenv('TWILIO_ACCOUNT_SID')
        auth_token = os.getenv('TWILIO_AUTH_TOKEN')
        client = Client(account_sid, auth_token)
        phone_number = os.getenv('TWILIO_PHONE_NUMBER')
        client.messages.create(
            body="Verificaci√≥n de conexi√≥n Twilio",
            from_=phone_number,
            to=phone_number  # Enviar a tu propio n√∫mero como prueba
        )
        print("‚úÖ Conexi√≥n con Twilio OK.")
    except Exception as e:
        print(f"‚ùå Error con Twilio: {e}")

# Funci√≥n de verificaci√≥n de OpenAI
def verificar_openai():
    try:
        openai.api_key = os.getenv('OPENAI_API_KEY')
        completion = openai.Completion.create(
            engine="text-davinci-003",
            prompt="Verificar conexi√≥n de OpenAI",
            max_tokens=5
        )
        print("‚úÖ Conexi√≥n con OpenAI OK.")
    except Exception as e:
        print(f"‚ùå Error con OpenAI: {e}")

# Funci√≥n de verificaci√≥n de conexi√≥n al webhook
def verificar_webhook():
    try:
        url_webhook = os.getenv('WEBHOOK_URL', 'http://localhost:5000/webhook')  # Reemplazar con la URL real
        response = requests.post(url_webhook, data={'Body': 'hola', 'From': 'whatsapp:+5215593372311'})
        if response.status_code == 200:
            print("‚úÖ Webhook responde correctamente.")
        else:
            print(f"‚ùå Error en el webhook, status code: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error en la conexi√≥n con el webhook: {e}")

# Funci√≥n de verificaci√≥n del servidor Flask
def verificar_servidor_flask():
    try:
        url_servidor = os.getenv('FLASK_SERVER_URL', 'http://localhost:5000')
        response = requests.get(url_servidor)
        if response.status_code == 200:
            print("‚úÖ Servidor Flask responde correctamente.")
        else:
            print(f"‚ùå Error en el servidor Flask, status code: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error en la conexi√≥n con el servidor Flask: {e}")

# Funci√≥n principal
def diagnosticar():
    print("üîç Iniciando diagn√≥stico del sistema Aura AI...\n")

    # Verificar archivos esenciales
    verificar_archivos()
    
    # Verificar conexi√≥n con Twilio
    verificar_twilio()

    # Verificar conexi√≥n con OpenAI
    verificar_openai()

    # Verificar webhook
    verificar_webhook()

    # Verificar servidor Flask
    verificar_servidor_flask()

# Ejecutar el diagn√≥stico
if __name__ == '__main__':
    diagnosticar()
