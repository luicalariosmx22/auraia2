#!/usr/bin/env python3
"""
Script de prueba para el sistema completo de automatizaciones
Verifica que todo funcione correctamente desde el descubrimiento hasta la ejecuci√≥n
"""

import sys
import json
from datetime import datetime
import os

# A√±adir el directorio ra√≠z al path
sys.path.append('.')

def test_supabase_connection():
    """Prueba 1: Verificar conexi√≥n a Supabase"""
    print("üîó Prueba 1: Verificando conexi√≥n a Supabase...")
    try:
        from clientes.aura.utils.supabase_client import supabase
        
        # Probar una consulta simple
        response = supabase.table("funciones_automatizables").select("*").limit(1).execute()
        count_response = supabase.table("funciones_automatizables").select("*").execute()
        count = len(count_response.data) if count_response.data else 0
        print(f"   ‚úÖ Conexi√≥n exitosa - {count} funciones en BD")
        return True
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
        return False

def test_descubridor_funciones():
    """Prueba 2: Verificar el descubridor de funciones"""
    print("\nüîç Prueba 2: Verificando descubridor de funciones...")
    try:
        from descubrir_funciones import DescubrirFunciones
        
        descubridor = DescubrirFunciones()
        
        # Probar escaneo de un m√≥dulo espec√≠fico
        funciones_meta = descubridor.escanear_modulo('meta_ads', 'clientes.aura.utils.meta_ads_utils')
        print(f"   ‚úÖ Funciones Meta Ads encontradas: {len(funciones_meta)}")
        
        if funciones_meta:
            print("   üìã Ejemplos encontrados:")
            for func in funciones_meta[:3]:
                print(f"      - {func['nombre_funcion']} ({func['categoria']})")
        
        return len(funciones_meta) > 0
    except Exception as e:
        print(f"   ‚ùå Error en descubridor: {e}")
        return False

def test_automatizaciones_bd():
    """Prueba 3: Verificar automatizaciones en base de datos"""
    print("\nüíæ Prueba 3: Verificando automatizaciones en BD...")
    try:
        from clientes.aura.utils.supabase_client import supabase
        
        # Obtener automatizaciones activas
        response = supabase.table("automatizaciones") \
            .select("*") \
            .eq("activo", True) \
            .execute()
        
        automatizaciones = response.data if response.data else []
        print(f"   ‚úÖ Automatizaciones activas: {len(automatizaciones)}")
        
        if automatizaciones:
            print("   üìã Automatizaciones encontradas:")
            for auto in automatizaciones:
                print(f"      - {auto['nombre']} ({auto['modulo_relacionado']}.{auto['funcion_objetivo']})")
                print(f"        Pr√≥xima: {auto.get('proxima_ejecucion', 'No programada')}")
        
        return len(automatizaciones) > 0
    except Exception as e:
        print(f"   ‚ùå Error consultando automatizaciones: {e}")
        return False

def test_ejecutor_automatizaciones():
    """Prueba 4: Verificar el ejecutor de automatizaciones"""
    print("\n‚öôÔ∏è Prueba 4: Verificando ejecutor de automatizaciones...")
    try:
        from clientes.aura.utils.automatizaciones_ejecutor import ejecutor
        from clientes.aura.utils.supabase_client import supabase
        
        # Obtener automatizaciones disponibles directamente de BD
        response = supabase.table("automatizaciones") \
            .select("*") \
            .eq("activo", True) \
            .execute()
        
        automatizaciones = response.data if response.data else []
        print(f"   ‚úÖ Ejecutor puede ver {len(automatizaciones)} automatizaciones")
        
        # Verificar que puede importar m√≥dulos
        if automatizaciones:
            auto_test = automatizaciones[0]
            modulo = auto_test['modulo_relacionado']
            funcion = auto_test['funcion_objetivo']
            
            print(f"   üß™ Probando importaci√≥n: {modulo}.{funcion}")
            
            # Intentar importar el m√≥dulo (sin ejecutar)
            try:
                import importlib
                modulo_nombre = f"clientes.aura.utils.{modulo}_utils" if modulo != "automatizaciones_ejecutor" else "clientes.aura.utils.automatizaciones_ejecutor"
                modulo_importado = importlib.import_module(modulo_nombre)
                print(f"   ‚úÖ M√≥dulo {modulo} importado correctamente")
                return True
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error importando m√≥dulo {modulo}: {e}")
                return False
        else:
            print("   ‚ö†Ô∏è No hay automatizaciones para probar")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error en ejecutor: {e}")
        return False

def test_ejecucion_ejemplo():
    """Prueba 5: Ejecutar una funci√≥n de ejemplo"""
    print("\nüöÄ Prueba 5: Ejecutando funci√≥n de ejemplo...")
    try:
        from clientes.aura.utils.automatizaciones_ejecutor import ejecutor
        from clientes.aura.utils.supabase_client import supabase
        
        # Buscar una automatizaci√≥n de ejemplo
        response = supabase.table("automatizaciones") \
            .select("*") \
            .eq("activo", True) \
            .execute()
        
        automatizaciones = response.data if response.data else []
        
        auto_ejemplo = None
        for auto in automatizaciones:
            if 'ejemplo' in auto['funcion_objetivo'].lower() or auto['modulo_relacionado'] == 'automatizaciones_ejecutor':
                auto_ejemplo = auto
                break
        
        if auto_ejemplo:
            print(f"   üéØ Ejecutando: {auto_ejemplo['nombre']}")
            print(f"   üìç Funci√≥n: {auto_ejemplo['modulo_relacionado']}.{auto_ejemplo['funcion_objetivo']}")
            
            resultado = ejecutor.ejecutar_por_id(auto_ejemplo['id'])
            
            print(f"   üìä Resultado: {json.dumps(resultado, indent=2, ensure_ascii=False)}")
            
            return resultado.get('success', False)
        else:
            print("   ‚ö†Ô∏è No se encontr√≥ automatizaci√≥n de ejemplo")
            
            # Intentar crear y ejecutar una funci√≥n de ejemplo directamente
            print("   üîß Probando ejecuci√≥n directa de funci√≥n ejemplo...")
            
            try:
                import importlib
                modulo = importlib.import_module('clientes.aura.utils.automatizaciones_ejecutor')
                
                if hasattr(modulo, 'ejemplo_reporte_diario'):
                    resultado = modulo.ejemplo_reporte_diario()
                    print(f"   ‚úÖ Funci√≥n de ejemplo ejecutada: {resultado}")
                    return True
                else:
                    print("   ‚ö†Ô∏è No se encontr√≥ funci√≥n de ejemplo")
                    return False
                    
            except Exception as e:
                print(f"   ‚ùå Error en ejecuci√≥n directa: {e}")
                return False
            
    except Exception as e:
        print(f"   ‚ùå Error en ejecuci√≥n de ejemplo: {e}")
        return False

def test_funciones_reales():
    """Prueba 6: Verificar funciones reales disponibles y nuevos campos"""
    print("\nüîß Prueba 6: Verificando funciones reales y nuevos campos...")
    try:
        from clientes.aura.utils.supabase_client import supabase
        
        # Obtener funciones por m√≥dulo incluyendo los nuevos campos
        response = supabase.table("funciones_automatizables") \
            .select("modulo, nombre_funcion, categoria, envia_notificacion, codigo_fuente, linea_inicio, ruta_modulo_python, tipo_archivo, archivo_origen, metodo_deteccion") \
            .eq("activa", True) \
            .eq("es_automatizable", True) \
            .execute()
        
        funciones = response.data if response.data else []
        
        # Agrupar por m√≥dulo
        por_modulo = {}
        funciones_con_codigo = 0
        funciones_escaneo_directo = 0
        
        for func in funciones:
            modulo = func['modulo']
            if modulo not in por_modulo:
                por_modulo[modulo] = []
            por_modulo[modulo].append(func)
            
            # Contar funciones con c√≥digo fuente
            if func.get('codigo_fuente') and func['codigo_fuente'] != '' and not func['codigo_fuente'].startswith('# Error') and not func['codigo_fuente'].startswith('# Funci√≥n'):
                funciones_con_codigo += 1
            
            # Contar funciones por m√©todo de detecci√≥n
            if func.get('metodo_deteccion') == 'escaneo_directo':
                funciones_escaneo_directo += 1
        
        print(f"   ‚úÖ Total de funciones: {len(funciones)}")
        print(f"   ÔøΩ Funciones con c√≥digo fuente: {funciones_con_codigo}")
        print(f"   üìÅ Funciones por escaneo directo: {funciones_escaneo_directo}")
        print("   ÔøΩüìä Distribuci√≥n por m√≥dulo:")
        
        for modulo, funcs in por_modulo.items():
            notificaciones = sum(1 for f in funcs if f.get('envia_notificacion'))
            con_codigo = sum(1 for f in funcs if f.get('codigo_fuente') and f['codigo_fuente'] != '' and not f['codigo_fuente'].startswith('# Error') and not f['codigo_fuente'].startswith('# Funci√≥n'))
            print(f"      - {modulo}: {len(funcs)} funciones ({notificaciones} con notificaciones, {con_codigo} con c√≥digo)")
        
        # Verificar que tenemos funciones Meta Ads con c√≥digo fuente
        meta_funcs = por_modulo.get('meta_ads', [])
        func_con_codigo = None
        
        for func in meta_funcs:
            if func.get('codigo_fuente') and len(func['codigo_fuente']) > 50:
                func_con_codigo = func
                break
        
        if func_con_codigo:
            print(f"   ‚úÖ Funci√≥n Meta Ads con c√≥digo encontrada: {func_con_codigo['nombre_funcion']}")
            print(f"      üìÑ Archivo: {func_con_codigo.get('archivo_origen', 'N/A')}")
            print(f"      üìç L√≠nea: {func_con_codigo.get('linea_inicio', 'N/A')}")
            print(f"      üîç M√©todo: {func_con_codigo.get('metodo_deteccion', 'N/A')}")
            print(f"      üìù C√≥digo: {len(func_con_codigo.get('codigo_fuente', ''))} caracteres")
            
            # Mostrar una peque√±a muestra del c√≥digo
            codigo = func_con_codigo.get('codigo_fuente', '')
            if codigo and not codigo.startswith('# Error'):
                lineas_codigo = codigo.split('\n')[:3]
                print(f"      üìñ Vista previa:")
                for i, linea in enumerate(lineas_codigo):
                    print(f"         {i+1}: {linea}")
            
            return True
        else:
            print("   ‚ö†Ô∏è No se encontraron funciones Meta Ads con c√≥digo fuente completo")
            
            # Verificar si hay alguna funci√≥n con c√≥digo fuente
            if funciones_con_codigo > 0:
                print(f"   ‚ÑπÔ∏è Hay {funciones_con_codigo} funciones con c√≥digo en otros m√≥dulos")
                return True
            else:
                print("   ‚ùå No se encontr√≥ ninguna funci√≥n con c√≥digo fuente")
                return False
            
    except Exception as e:
        print(f"   ‚ùå Error verificando funciones reales: {e}")
        return False

def test_apis_automatizaciones():
    """Prueba 7: Verificar APIs del sistema"""
    print("\nüåê Prueba 7: Verificando APIs (simulaci√≥n)...")
    try:
        # Simular las llamadas que har√≠a el frontend
        from clientes.aura.utils.supabase_client import supabase
        
        # API 1: Listar funciones por m√≥dulo
        print("   üîó Probando API de funciones por m√≥dulo...")
        response = supabase.table("funciones_automatizables") \
            .select("nombre_funcion, descripcion, parametros, categoria, envia_notificacion") \
            .eq("modulo", "meta_ads") \
            .eq("activa", True) \
            .execute()
        
        funciones_meta = response.data if response.data else []
        print(f"      ‚úÖ API funciones Meta Ads: {len(funciones_meta)} resultados")
        
        # API 2: Detalle de funci√≥n espec√≠fica
        if funciones_meta:
            func_test = funciones_meta[0]
            print(f"   üîç Probando API de detalle para: {func_test['nombre_funcion']}")
            
            response_detalle = supabase.table("funciones_automatizables") \
                .select("*") \
                .eq("modulo", "meta_ads") \
                .eq("nombre_funcion", func_test['nombre_funcion']) \
                .limit(1) \
                .execute()
            
            if response_detalle.data:
                print("      ‚úÖ API detalle de funci√≥n: funcionando")
                detalle = response_detalle.data[0]
                if detalle.get('parametros'):
                    print(f"      üìù Par√°metros disponibles: {list(detalle['parametros'].keys())}")
            else:
                print("      ‚ö†Ô∏è API detalle: sin resultados")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error en APIs: {e}")
        return False

def test_codigo_fuente_extraccion():
    """Prueba 9: Verificar extracci√≥n de c√≥digo fuente completo"""
    print("\nüìù Prueba 9: Verificando extracci√≥n de c√≥digo fuente...")
    try:
        from descubrir_funciones import DescubrirFunciones
        from clientes.aura.utils.supabase_client import supabase
        
        # Ejecutar descubrimiento en m√≥dulo Meta Ads para probar extracci√≥n
        descubridor = DescubrirFunciones()
        
        print("   üîç Ejecutando esc√°ner en m√≥dulo Meta Ads...")
        funciones_encontradas = descubridor.escanear_modulo('meta_ads', 'clientes.aura.utils.meta_ads_utils')
        
        funciones_con_codigo = []
        for func in funciones_encontradas:
            if func.get('codigo_fuente') and len(func['codigo_fuente']) > 50 and not func['codigo_fuente'].startswith('# Error'):
                funciones_con_codigo.append(func)
        
        print(f"   ‚úÖ Funciones con c√≥digo extra√≠do: {len(funciones_con_codigo)}")
        
        if funciones_con_codigo:
            # Mostrar detalles de la primera funci√≥n con c√≥digo
            func_ejemplo = funciones_con_codigo[0]
            print(f"   üìã Ejemplo: {func_ejemplo['nombre_funcion']}")
            print(f"      üìÑ Archivo: {func_ejemplo.get('archivo_origen', 'N/A')}")
            print(f"      üìç L√≠nea inicio: {func_ejemplo.get('linea_inicio', 'N/A')}")
            print(f"      üîó M√≥dulo Python: {func_ejemplo.get('ruta_modulo_python', 'N/A')}")
            print(f"      üìù Tama√±o c√≥digo: {len(func_ejemplo.get('codigo_fuente', ''))} caracteres")
            print(f"      üîç M√©todo detecci√≥n: {func_ejemplo.get('metodo_deteccion', 'N/A')}")
            
            # Verificar que el c√≥digo extra√≠do es v√°lido Python
            codigo = func_ejemplo.get('codigo_fuente', '')
            if codigo.startswith('def '):
                print("      ‚úÖ C√≥digo comienza con 'def' (v√°lido)")
                
                # Contar l√≠neas
                lineas = codigo.split('\n')
                print(f"      üìè L√≠neas de c√≥digo: {len(lineas)}")
                
                # Mostrar primeras l√≠neas
                print("      üìñ Primeras l√≠neas:")
                for i, linea in enumerate(lineas[:5]):
                    if linea.strip():
                        print(f"         {i+1}: {linea}")
                
                # Verificar que se registr√≥ en BD
                print("   üíæ Verificando registro en base de datos...")
                
                response = supabase.table("funciones_automatizables") \
                    .select("codigo_fuente, linea_inicio, ruta_modulo_python") \
                    .eq("modulo", "meta_ads") \
                    .eq("nombre_funcion", func_ejemplo['nombre_funcion']) \
                    .limit(1) \
                    .execute()
                
                if response.data and response.data[0].get('codigo_fuente'):
                    bd_codigo = response.data[0]['codigo_fuente']
                    print(f"      ‚úÖ C√≥digo guardado en BD: {len(bd_codigo)} caracteres")
                    print(f"      üìç L√≠nea inicio en BD: {response.data[0].get('linea_inicio', 'N/A')}")
                    print(f"      üîó M√≥dulo en BD: {response.data[0].get('ruta_modulo_python', 'N/A')}")
                    return True
                else:
                    print("      ‚ùå C√≥digo no se guard√≥ en BD")
                    return False
            else:
                print(f"      ‚ö†Ô∏è C√≥digo no comienza con 'def': {codigo[:50]}...")
                return False
        else:
            print("   ‚ùå No se encontraron funciones con c√≥digo v√°lido")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error verificando extracci√≥n de c√≥digo: {e}")
        return False

def test_integracion_completa():
    """Prueba 8: Integraci√≥n completa del sistema"""
    print("\nüîÑ Prueba 8: Integraci√≥n completa del sistema...")
    try:
        from clientes.aura.utils.automatizaciones_ejecutor import ejecutor
        from clientes.aura.utils.supabase_client import supabase
        import importlib
        
        # PASO 1: Obtener automatizaci√≥n de Meta Ads
        response = supabase.table("automatizaciones") \
            .select("*") \
            .eq("activo", True) \
            .eq("modulo_relacionado", "meta_ads") \
            .limit(1) \
            .execute()
        
        if response.data:
            auto_meta = response.data[0]
            print(f"   üéØ Automatizaci√≥n Meta Ads encontrada: {auto_meta['nombre']}")
            print(f"   ‚öôÔ∏è Funci√≥n objetivo: {auto_meta['funcion_objetivo']}")
            print(f"   üìÖ Pr√≥xima ejecuci√≥n: {auto_meta.get('proxima_ejecucion', 'No programada')}")
            
            # PASO 2: Buscar la funci√≥n real en la tabla funciones_automatizables
            print("   üîç Buscando funci√≥n real en funciones_automatizables...")
            
            response_funcion = supabase.table("funciones_automatizables") \
                .select("nombre_funcion, modulo, ruta_modulo_python, codigo_fuente") \
                .eq("modulo", "meta_ads") \
                .eq("nombre_funcion", auto_meta['funcion_objetivo']) \
                .limit(1) \
                .execute()
            
            if response_funcion.data:
                func_data = response_funcion.data[0]
                print(f"      ‚úÖ Funci√≥n encontrada en BD: {func_data['nombre_funcion']}")
                print(f"      üì¶ M√≥dulo Python: {func_data.get('ruta_modulo_python', 'N/A')}")
                print(f"      üíæ C√≥digo disponible: {'S√≠' if func_data.get('codigo_fuente') else 'No'}")
                
                # PASO 3: Intentar importar usando la ruta del m√≥dulo Python real
                ruta_modulo = func_data.get('ruta_modulo_python')
                if ruta_modulo:
                    try:
                        print(f"      üîß Intentando importar: {ruta_modulo}")
                        modulo = importlib.import_module(ruta_modulo)
                        print(f"      ‚úÖ M√≥dulo importado correctamente")
                        
                        # Verificar que la funci√≥n existe en el m√≥dulo
                        if hasattr(modulo, auto_meta['funcion_objetivo']):
                            print(f"      ‚úÖ Funci√≥n {auto_meta['funcion_objetivo']} encontrada en m√≥dulo")
                            
                            # Verificar par√°metros
                            parametros = auto_meta.get('parametros_json', {})
                            print(f"      üìù Par√°metros configurados: {json.dumps(parametros, indent=2)}")
                            
                            print("   ‚úÖ Sistema completo: FUNCIONANDO")
                            return True
                        else:
                            print(f"      ‚ö†Ô∏è Funci√≥n {auto_meta['funcion_objetivo']} no encontrada en m√≥dulo importado")
                            # Listar funciones disponibles en el m√≥dulo
                            funciones_disponibles = [attr for attr in dir(modulo) if callable(getattr(modulo, attr)) and not attr.startswith('_')][:5]
                            print(f"      üìã Funciones disponibles: {funciones_disponibles}")
                            return False
                            
                    except Exception as e:
                        print(f"      ‚ùå Error importando m√≥dulo {ruta_modulo}: {e}")
                        return False
                else:
                    # Fallback: intentar con la ruta est√°ndar
                    print("      üîÑ Probando ruta est√°ndar de m√≥dulo...")
                    try:
                        modulo_nombre = f"clientes.aura.utils.{auto_meta['modulo_relacionado']}_utils"
                        modulo = importlib.import_module(modulo_nombre)
                        print(f"      ‚úÖ M√≥dulo {auto_meta['modulo_relacionado']} importado (ruta est√°ndar)")
                        
                        if hasattr(modulo, auto_meta['funcion_objetivo']):
                            print(f"      ‚úÖ Funci√≥n {auto_meta['funcion_objetivo']} encontrada")
                            print("   ‚úÖ Sistema completo: FUNCIONANDO")
                            return True
                        else:
                            print(f"      ‚ùå Funci√≥n {auto_meta['funcion_objetivo']} no encontrada en m√≥dulo est√°ndar")
                            return False
                            
                    except Exception as e:
                        print(f"      ‚ùå Error importando m√≥dulo est√°ndar: {e}")
                        return False
            else:
                print(f"      ‚ö†Ô∏è Funci√≥n {auto_meta['funcion_objetivo']} no encontrada en funciones_automatizables")
                
                # Mostrar funciones disponibles para Meta Ads
                print("      üîç Buscando funciones disponibles para Meta Ads...")
                response_todas = supabase.table("funciones_automatizables") \
                    .select("nombre_funcion") \
                    .eq("modulo", "meta_ads") \
                    .limit(5) \
                    .execute()
                
                if response_todas.data:
                    funciones_disponibles = [f['nombre_funcion'] for f in response_todas.data]
                    print(f"      üìã Funciones disponibles: {funciones_disponibles}")
                    
                    # Sugerir actualizar la automatizaci√≥n con una funci√≥n real
                    print(f"      üí° Sugerencia: Actualizar automatizaci√≥n para usar una de estas funciones")
                    return False
                else:
                    print("      ‚ùå No se encontraron funciones Meta Ads en BD")
                    return False
                    
        else:
            print("   ‚ö†Ô∏è No se encontr√≥ automatizaci√≥n de Meta Ads")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error en integraci√≥n completa: {e}")
        return False

def main():
    """Funci√≥n principal que ejecuta todas las pruebas"""
    print("üß™ SISTEMA DE PRUEBAS - AUTOMATIZACIONES AURA")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåç Directorio: {os.getcwd()}")
    print("=" * 60)
    
    # Lista de pruebas
    pruebas = [
        ("Conexi√≥n Supabase", test_supabase_connection),
        ("Descubridor de Funciones", test_descubridor_funciones),
        ("Automatizaciones en BD", test_automatizaciones_bd),
        ("Ejecutor de Automatizaciones", test_ejecutor_automatizaciones),
        ("Ejecuci√≥n de Ejemplo", test_ejecucion_ejemplo),
        ("Funciones Reales y Nuevos Campos", test_funciones_reales),
        ("APIs del Sistema", test_apis_automatizaciones),
        ("Extracci√≥n de C√≥digo Fuente", test_codigo_fuente_extraccion),
        ("Integraci√≥n Completa", test_integracion_completa)
    ]
    
    # Ejecutar pruebas
    resultados = []
    exitosas = 0
    
    for nombre, funcion_prueba in pruebas:
        try:
            resultado = funcion_prueba()
            resultados.append((nombre, resultado))
            if resultado:
                exitosas += 1
        except Exception as e:
            print(f"   üí• Error inesperado en {nombre}: {e}")
            resultados.append((nombre, False))
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    for nombre, resultado in resultados:
        icono = "‚úÖ" if resultado else "‚ùå"
        print(f"{icono} {nombre}")
    
    print("\n" + "-" * 60)
    print(f"üéØ Pruebas exitosas: {exitosas}/{len(pruebas)}")
    
    if exitosas == len(pruebas):
        print("üéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!")
        print("‚ú® Todas las pruebas pasaron exitosamente")
        print("üöÄ El sistema de automatizaciones est√° listo para usar")
    elif exitosas >= len(pruebas) * 0.8:
        print("üü° SISTEMA MAYORMENTE FUNCIONAL")
        print("‚ö†Ô∏è Algunas pruebas fallaron, pero el n√∫cleo funciona")
        print("üîß Revisar componentes que fallaron")
    else:
        print("üî¥ SISTEMA CON PROBLEMAS")
        print("‚ùå M√∫ltiples componentes fallaron")
        print("üõ†Ô∏è Requiere revisi√≥n y correcci√≥n")
    
    print("\n" + "=" * 60)
    print("üìù RECOMENDACIONES:")
    
    if exitosas == len(pruebas):
        print("‚Ä¢ ‚úÖ Sistema listo para producci√≥n")
        print("‚Ä¢ üîÑ Configurar schedule/cron para ejecuci√≥n autom√°tica")
        print("‚Ä¢ üìä Monitorear logs de ejecuci√≥n")
        print("‚Ä¢ üîî Configurar alertas de fallos")
        print("‚Ä¢ üíæ C√≥digo fuente completo disponible para an√°lisis de IA")
        print("‚Ä¢ üîç M√©todos de detecci√≥n h√≠bridos funcionando correctamente")
    else:
        print("‚Ä¢ üîç Revisar componentes que fallaron")
        print("‚Ä¢ üìã Verificar configuraci√≥n de base de datos")
        print("‚Ä¢ üîß Comprobar importaciones de m√≥dulos")
        print("‚Ä¢ üåê Verificar conectividad")
        print("‚Ä¢ üíæ Si falla extracci√≥n de c√≥digo: verificar permisos de archivos")
        print("‚Ä¢ üìù Si falla guardado en BD: verificar esquema de tabla en Supabase")
    
    return exitosas == len(pruebas)

if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Pruebas interrumpidas por el usuario")
        sys.exit(2)
    except Exception as e:
        print(f"\n\nüí• Error cr√≠tico: {e}")
        sys.exit(3)
