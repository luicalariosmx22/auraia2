#!/bin/bash

# Verificaci√≥n de archivos para Railway deployment
echo "=== VERIFICACI√ìN DE ARCHIVOS PARA RAILWAY ==="
echo "Fecha: $(date)"
echo ""

# Archivos cr√≠ticos para Railway
CRITICAL_FILES=(
    "server.js"
    "package.json"
    "Dockerfile"
)

# Directorio del proyecto
PROJECT_DIR="/mnt/c/Users/PC/PYTHON/Auraai2"
cd "$PROJECT_DIR"

echo "üìÅ Directorio del proyecto: $PROJECT_DIR"
echo ""

# Verificar cada archivo cr√≠tico
echo "üîç VERIFICANDO ARCHIVOS CR√çTICOS:"
echo "-----------------------------------"

for FILE in "${CRITICAL_FILES[@]}"; do
    if [ -f "$FILE" ]; then
        SIZE=$(stat -c%s "$FILE")
        echo "‚úÖ $FILE - Tama√±o: $SIZE bytes"
        
        # Verificaciones espec√≠ficas
        case "$FILE" in
            "server.js")
                echo "   üìù Verificando contenido de server.js..."
                if grep -q "process.env.PORT" "$FILE"; then
                    echo "   ‚úÖ Puerto configurado correctamente"
                else
                    echo "   ‚ö†Ô∏è  Puerto podr√≠a no estar configurado"
                fi
                
                if grep -q "express" "$FILE"; then
                    echo "   ‚úÖ Express detectado"
                else
                    echo "   ‚ùå Express no detectado"
                fi
                ;;
                
            "package.json")
                echo "   üìù Verificando package.json..."
                if grep -q '"start"' "$FILE"; then
                    echo "   ‚úÖ Script de start definido"
                else
                    echo "   ‚ö†Ô∏è  Script de start podr√≠a faltar"
                fi
                
                if grep -q '"main"' "$FILE"; then
                    echo "   ‚úÖ Main entry point definido"
                else
                    echo "   ‚ö†Ô∏è  Main entry point podr√≠a faltar"
                fi
                ;;
                
            "Dockerfile")
                echo "   üìù Verificando Dockerfile..."
                if grep -q "google-chrome" "$FILE"; then
                    echo "   ‚úÖ Chrome installation detectada"
                else
                    echo "   ‚ö†Ô∏è  Chrome installation podr√≠a faltar"
                fi
                ;;
        esac
    else
        echo "‚ùå $FILE - NO ENCONTRADO"
    fi
    echo ""
done

echo "üîç VERIFICANDO ARCHIVOS ADICIONALES:"
echo "-----------------------------------"

# Otros archivos importantes
OTHER_FILES=(
    "package-lock.json"
    "requirements.txt"
    ".gitignore"
)

for FILE in "${OTHER_FILES[@]}"; do
    if [ -f "$FILE" ]; then
        SIZE=$(stat -c%s "$FILE")
        echo "‚úÖ $FILE - Tama√±o: $SIZE bytes"
    else
        echo "‚ö†Ô∏è  $FILE - No encontrado (opcional)"
    fi
done

echo ""
echo "üåê VERIFICANDO CONTENIDO CR√çTICO:"
echo "-----------------------------------"

# Verificar el puerto en server.js
echo "üîç Puerto en server.js:"
if [ -f "server.js" ]; then
    PORT_LINE=$(grep -n "PORT.*=" server.js | head -1)
    if [ -n "$PORT_LINE" ]; then
        echo "   $PORT_LINE"
    else
        echo "   ‚ùå No se encontr√≥ configuraci√≥n de puerto"
    fi
else
    echo "   ‚ùå server.js no encontrado"
fi

echo ""

# Verificar el script de start en package.json
echo "üîç Script de start en package.json:"
if [ -f "package.json" ]; then
    START_LINE=$(grep -A 3 -B 1 '"start"' package.json)
    if [ -n "$START_LINE" ]; then
        echo "$START_LINE"
    else
        echo "   ‚ùå No se encontr√≥ script de start"
    fi
else
    echo "   ‚ùå package.json no encontrado"
fi

echo ""
echo "üìä RESUMEN:"
echo "-----------------------------------"

FOUND_CRITICAL=0
for FILE in "${CRITICAL_FILES[@]}"; do
    if [ -f "$FILE" ]; then
        ((FOUND_CRITICAL++))
    fi
done

echo "Archivos cr√≠ticos encontrados: $FOUND_CRITICAL/${#CRITICAL_FILES[@]}"

if [ $FOUND_CRITICAL -eq ${#CRITICAL_FILES[@]} ]; then
    echo "üéâ ¬°Todos los archivos cr√≠ticos est√°n presentes!"
    echo "‚úÖ El proyecto deber√≠a poder desplegarse en Railway"
else
    echo "‚ùå Faltan archivos cr√≠ticos"
    echo "‚ö†Ô∏è  El deployment podr√≠a fallar"
fi

echo ""
echo "üöÄ PR√ìXIMOS PASOS:"
echo "-----------------------------------"
echo "1. Verificar el estado del deployment en Railway Dashboard"
echo "2. Revisar los logs de build en Railway"
echo "3. Confirmar que la URL del proyecto sea correcta"
echo "4. Si es necesario, triggerar un nuevo deployment"

# Verificar el estado del repositorio git
echo ""
echo "üìã ESTADO DEL REPOSITORIO:"
echo "-----------------------------------"

if [ -d ".git" ]; then
    echo "‚úÖ Repositorio git detectado"
    
    # Verificar el remoto
    REMOTE=$(git remote -v 2>/dev/null | grep origin | head -1)
    if [ -n "$REMOTE" ]; then
        echo "‚úÖ Remoto configurado: $REMOTE"
    else
        echo "‚ö†Ô∏è  No se pudo verificar el remoto"
    fi
    
    # Verificar el √∫ltimo commit
    LAST_COMMIT=$(git log --oneline -1 2>/dev/null)
    if [ -n "$LAST_COMMIT" ]; then
        echo "‚úÖ √öltimo commit: $LAST_COMMIT"
    else
        echo "‚ö†Ô∏è  No se pudo verificar el √∫ltimo commit"
    fi
else
    echo "‚ùå No es un repositorio git"
fi
