#!/usr/bin/env python3
"""
Script para corregir la configuraci√≥n de automatizaciones
Actualiza el m√≥dulo de sincronizaci√≥n de reportes Meta Ads
"""

import sys
sys.path.append('.')

from clientes.aura.utils.supabase_client import supabase

def corregir_automatizacion_meta_ads():
    print("üîß Corrigiendo configuraci√≥n de automatizaci√≥n Meta Ads...")
    
    try:
        # Buscar la automatizaci√≥n de reportes semanales
        result = supabase.table('automatizaciones') \
            .select('*') \
            .ilike('nombre', '%Meta Ads - Reportes Semanales%') \
            .execute()
        
        if not result.data:
            print("‚ùå No se encontr√≥ la automatizaci√≥n 'Meta Ads - Reportes Semanales'")
            return False
        
        automatizacion = result.data[0]
        print(f"‚úÖ Encontrada automatizaci√≥n:")
        print(f"   ID: {automatizacion['id']}")
        print(f"   Nombre: {automatizacion['nombre']}")
        print(f"   M√≥dulo actual: {automatizacion.get('modulo_relacionado', 'N/A')}")
        print(f"   Funci√≥n actual: {automatizacion.get('funcion_objetivo', 'N/A')}")
        
        # Actualizar la configuraci√≥n
        update_data = {
            'modulo_relacionado': 'sincronizador_semanal',
            'funcion_objetivo': 'sincronizar_reportes_semanales',
            'actualizado_en': 'now()'
        }
        
        update_result = supabase.table('automatizaciones') \
            .update(update_data) \
            .eq('id', automatizacion['id']) \
            .execute()
        
        if update_result.data:
            print("\n‚úÖ Automatizaci√≥n actualizada correctamente:")
            print(f"   Nuevo m√≥dulo: {update_data['modulo_relacionado']}")
            print(f"   Nueva funci√≥n: {update_data['funcion_objetivo']}")
            return True
        else:
            print("‚ùå Error al actualizar la automatizaci√≥n")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def verificar_funcion_disponible():
    print("\nüîç Verificando que la funci√≥n est√© disponible...")
    
    try:
        from clientes.aura.routes.panel_cliente_meta_ads.sincronizador_semanal import sincronizar_reportes_semanales
        print("‚úÖ Funci√≥n 'sincronizar_reportes_semanales' importada correctamente")
        
        # Verificar tambi√©n el m√≥dulo en el ejecutor
        from clientes.aura.utils.automatizaciones_ejecutor import ejecutor
        if 'sincronizador_semanal' in ejecutor.modulos_disponibles:
            print("‚úÖ M√≥dulo 'sincronizador_semanal' registrado en el ejecutor")
            return True
        else:
            print("‚ùå M√≥dulo 'sincronizador_semanal' NO registrado en el ejecutor")
            return False
            
    except ImportError as e:
        print(f"‚ùå Error al importar la funci√≥n: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando correcci√≥n de automatizaci√≥n Meta Ads...")
    print("=" * 60)
    
    # Verificar funci√≥n disponible
    if not verificar_funcion_disponible():
        print("‚ùå La funci√≥n no est√° disponible. Abortando.")
        sys.exit(1)
    
    # Corregir configuraci√≥n
    if corregir_automatizacion_meta_ads():
        print("\nüéâ ¬°Correcci√≥n completada exitosamente!")
        print("\nüí° Ahora puedes ejecutar:")
        print("   python ejecutar_automatizaciones.py --todas --verbose")
    else:
        print("\n‚ùå La correcci√≥n fall√≥")
        sys.exit(1)
    
    print("=" * 60)
