#!/usr/bin/env python3
"""
Debug del generador IA para ver exactamente qu√© est√° pasando con el mapeo
"""
import pandas as pd
from google_ads_sql_generator import GoogleAdsExcelAnalyzer

def debug_ai_mapping():
    """Debuggear el proceso de mapeo del generador IA"""
    print("üîç DEBUGGING GENERADOR IA - MAPEO DE COLUMNAS")
    print("=" * 60)
    
    # Crear el mismo DataFrame que en el test anterior
    campaigns_data = {
        'Campaign': ['Test Campaign 001'],
        'Campaign type': ['Search'],
        'Campaign state': ['Enabled'],
        'Budget': [1000.0],
        'Bidding strategy': ['Target CPA'],
        'Target CPA': [50.0],
        'Impressions': [15000],
        'Clicks': [450],
        'CTR': [3.0],
        'Cost': [900.0],
        'Conversions': [18],
        'Cost/conv.': [50.0],
        'Conv. rate': [4.0],
        # Las columnas problem√°ticas
        'absolute_top_impression_share': [0.75],
        'search_absolute_top_impression_share': [0.80],
        'impression_share': [0.85],
        'search_impression_share': [0.88]
    }
    
    df = pd.DataFrame(campaigns_data)
    
    print(f"üìä DataFrame original:")
    print(f"   Filas: {len(df)}")
    print(f"   Columnas: {len(df.columns)}")
    print(f"   Columnas: {list(df.columns)}")
    
    # Crear generador y configurar para campa√±as
    analyzer = GoogleAdsExcelAnalyzer()
    analyzer.set_table_type('campaigns')
    
    print(f"\nüéØ Columnas objetivo del generador IA para campa√±as:")
    target_cols = analyzer.target_columns
    print(f"   Total: {len(target_cols)}")
    
    # Verificar si las columnas problem√°ticas est√°n en target_columns
    problematic_cols = ['absolute_top_impression_share', 'search_absolute_top_impression_share', 'impression_share', 'search_impression_share']
    
    print(f"\nüîç Verificando columnas problem√°ticas en target_columns:")
    for col in problematic_cols:
        if col in target_cols:
            print(f"   ‚úÖ {col}: PRESENTE en target_columns")
        else:
            print(f"   ‚ùå {col}: NO est√° en target_columns")
    
    # Simular el filtrado que hace el generador
    print(f"\nüîÑ Simulando filtrado para OpenAI...")
    
    # C√≥digo copiado del generador (l√≠neas 194-204)
    if len(df.columns) > 50:
        print("   üìä Aplicando filtrado (>50 columnas)")
        essential_cols = [col for col in df.columns if any(keyword in col.lower() 
                        for keyword in ['campaign', 'campa√±a', 'cost', 'costo', 'click', 
                                      'clic', 'impression', 'impresi√≥n', 'conversion', 
                                      'conversi√≥n', 'budget', 'presupuesto', 'status', 
                                      'estado', 'type', 'tipo'])][:20]
    else:
        print("   üìä NO se aplica filtrado (<50 columnas)")
        essential_cols = list(df.columns)
    
    print(f"   Columnas despu√©s del filtrado: {len(essential_cols)}")
    print(f"   Columnas: {essential_cols}")
    
    # Verificar si las columnas problem√°ticas sobreviven el filtrado
    print(f"\nüîç Verificando supervivencia de columnas problem√°ticas:")
    for col in problematic_cols:
        if col in essential_cols:
            print(f"   ‚úÖ {col}: SOBREVIVE al filtrado")
        else:
            print(f"   ‚ùå {col}: ELIMINADA por el filtrado")
            
            # Verificar qu√© keyword deber√≠a detectarla
            keywords = ['campaign', 'campa√±a', 'cost', 'costo', 'click', 'clic', 'impression', 'impresi√≥n', 'conversion', 'conversi√≥n', 'budget', 'presupuesto', 'status', 'estado', 'type', 'tipo']
            matching_keywords = [kw for kw in keywords if kw in col.lower()]
            if matching_keywords:
                print(f"      üîç Deber√≠a detectarse por: {matching_keywords}")
            else:
                print(f"      ‚ö†Ô∏è No coincide con ninguna keyword de filtrado")
    
    # Intentar el an√°lisis real para ver qu√© mapea OpenAI
    print(f"\nü§ñ Intentando an√°lisis real con OpenAI...")
    try:
        analysis = analyzer.analyze_excel_structure(df)
        
        print(f"‚úÖ An√°lisis exitoso")
        print(f"üìã Mapeos encontrados: {len(analysis.get('column_mapping', {}))}")
        
        column_mapping = analysis.get('column_mapping', {})
        
        print(f"\nüîç Verificando mapeos de columnas problem√°ticas:")
        for col in problematic_cols:
            if col in column_mapping:
                mapped_to = column_mapping[col]
                print(f"   ‚úÖ {col} -> {mapped_to}")
            else:
                print(f"   ‚ùå {col}: NO MAPEADA por OpenAI")
                
                # Buscar mapeos similares
                similar_mappings = {k: v for k, v in column_mapping.items() if 'impression' in k.lower() or 'share' in k.lower()}
                if similar_mappings:
                    print(f"      üîç Mapeos similares encontrados: {similar_mappings}")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis de OpenAI: {e}")

if __name__ == "__main__":
    debug_ai_mapping()
    
    print("\n" + "=" * 60)
    print("üí° CONCLUSIONES:")
    print("1. Verificar si las columnas est√°n en target_columns del generador")
    print("2. Verificar si sobreviven al filtrado de columnas esenciales")
    print("3. Verificar si OpenAI las mapea correctamente")
    print("4. Posible soluci√≥n: Agregar keywords al filtrado o incluir m√°s columnas")
