#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Verificaci√≥n r√°pida y configuraci√≥n de ejemplo para Google Ads API
Este script:
1. Verifica que la tabla google_ads_config existe
2. Inserta una configuraci√≥n de ejemplo si no hay registros
3. Muestra los pasos siguientes para completar la integraci√≥n
"""

import os
import sys
import json
import traceback
from datetime import datetime

# Configurar codificaci√≥n para Windows
if sys.platform == 'win32':
    import io
    import codecs
    # Configurar codificaci√≥n para consola en Windows
    try:
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
        # Forzar codificaci√≥n UTF-8 para entrada/salida
        codecs.register_error('strict', codecs.replace_errors)
    except Exception as e:
        print(f"Advertencia: No se pudo configurar la codificaci√≥n: {e}")
    
    # Intentar configurar la consola de Windows para UTF-8
    try:
        import ctypes
        kernel32 = ctypes.windll.kernel32
        kernel32.SetConsoleCP(65001)  # Establecer codificaci√≥n de entrada a UTF-8
        kernel32.SetConsoleOutputCP(65001)  # Establecer codificaci√≥n de salida a UTF-8
    except Exception:
        pass  # Si falla, continuamos con la configuraci√≥n predeterminada

try:
    from clientes.aura.utils.supabase_client import supabase
except ImportError as e:
    print(f"‚ùå Error importando dependencias: {e}")
    print("Aseg√∫rate de estar en el directorio ra√≠z del proyecto y que las dependencias est√©n instaladas.")
    sys.exit(1)

# Configuraci√≥n de ejemplo
CONFIG_EJEMPLO = {
    "client_id": "ejemplo-client-id.apps.googleusercontent.com",
    "client_secret": "GOCSPX-ejemplo-client-secret",
    "developer_token": "ejemplo-developer-token",
    "login_customer_id": "1234567890",
    "developer_token_valid": True,
    "created_at": datetime.now().isoformat(),
    "updated_at": datetime.now().isoformat()
}

def verificar_tabla():
    """Verifica si la tabla existe y contiene registros"""
    print("\nüîç Verificando tabla google_ads_config...\n")
    
    try:
        # Intentar seleccionar registros
        response = supabase.table("google_ads_config").select("id").execute()
        
        if response.data:
            print(f"‚úÖ La tabla existe y contiene {len(response.data)} registros.")
            return True
        else:
            print("‚úÖ La tabla existe pero no contiene registros.")
            return False
    
    except Exception as e:
        error_str = str(e).lower()
        
        if "does not exist" in error_str or "42p01" in error_str:
            print("‚ùå La tabla no existe.")
            return None
        else:
            print(f"‚ùå Error verificando la tabla: {e}")
            return None

def insertar_configuracion_ejemplo():
    """Inserta una configuraci√≥n de ejemplo en la tabla"""
    print("\nüìù Insertando configuraci√≥n de ejemplo...\n")
    
    try:
        # Insertar datos
        response = supabase.table("google_ads_config").insert(CONFIG_EJEMPLO).execute()
        
        if response.data:
            print("‚úÖ Configuraci√≥n de ejemplo insertada correctamente.")
            return True
        else:
            print("‚ùå Error al insertar la configuraci√≥n de ejemplo.")
            return False
    
    except Exception as e:
        print(f"‚ùå Error al insertar la configuraci√≥n: {e}")
        return False

def input_seguro(prompt):
    """Funci√≥n de input mejorada para manejar problemas de codificaci√≥n"""
    try:
        return input(prompt)
    except UnicodeEncodeError:
        # Si hay error de codificaci√≥n, usar ASCII para el prompt
        print("[Advertencia: Problemas con caracteres especiales]")
        return input(prompt.encode('ascii', 'replace').decode())
    except Exception as e:
        print(f"[Error en input: {e}]")
        return input(">> ")  # Prompt simplificado como fallback

def mostrar_instrucciones():
    """Muestra instrucciones para continuar con la integraci√≥n"""
    print("\nüìã INSTRUCCIONES PARA CONTINUAR\n")
    
    print("""
1. Ahora que la tabla est√° creada y contiene una configuraci√≥n de ejemplo,
   debes actualizar estos datos con tus credenciales reales de Google Ads API.

2. Para obtener estas credenciales necesitar√°s:
   - Un proyecto en Google Cloud Platform con OAuth configurado
   - Un Developer Token de Google Ads
   - Una cuenta de Google Ads con acceso de administrador

3. Una vez que tengas estas credenciales, puedes:
   a) Actualizar manualmente la tabla en Supabase, o
   b) Ejecutar: python configurar_google_ads.py

4. Despu√©s de actualizar las credenciales, obt√©n un token de acceso con:
   python renovar_token_google_ads.py --renew-token

5. Finalmente, verifica que todo funciona correctamente con:
   python diagnostico_token_google_ads.py
""")

def main():
    """Funci√≥n principal"""
    print("\nüöÄ VERIFICACI√ìN R√ÅPIDA Y CONFIGURACI√ìN GOOGLE ADS\n")
    print("="*80 + "\n")
    
    try:
        # Verificar si la tabla existe y tiene registros
        resultado = verificar_tabla()
        
        if resultado is None:
            print("\n‚ùå No se pudo verificar la tabla. Por favor, crea la tabla manualmente.")
            print("Usa el script SQL: scripts/crear_tabla_google_ads_config.sql")
            return 1
        elif resultado is False:
            # Tabla existe pero sin registros
            print("\n‚ÑπÔ∏è La tabla existe pero no contiene registros.")
            respuesta = input_seguro("¬øDeseas insertar una configuraci√≥n de ejemplo? (s/n): ")
            
            if respuesta.lower() == 's':
                insertar_configuracion_ejemplo()
        else:
            # Tabla existe con registros
            print("\n‚ÑπÔ∏è La tabla ya contiene registros de configuraci√≥n.")
        
        # Mostrar instrucciones
        mostrar_instrucciones()
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
