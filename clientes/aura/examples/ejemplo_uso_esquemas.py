"""
Ejemplo de c√≥mo usar los esquemas de Supabase en tu c√≥digo.
Este archivo muestra las mejores pr√°cticas para trabajar con los esquemas.
"""

import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path para importaciones
root_dir = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(root_dir))

# Forma 1: Importar directamente las funciones de utilidad
try:
    from clientes.aura.utils import (
        cargar_esquemas, 
        obtener_columnas_tabla, 
        verificar_columna_existe,
        listar_tablas_disponibles
    )
    UTILS_DISPONIBLES = True
except ImportError:
    print("‚ö†Ô∏è No se pudieron importar las funciones de utils, usando m√©todo directo")
    UTILS_DISPONIBLES = False

# Forma 2: Importar el diccionario completo de esquemas
try:
    from clientes.aura.utils.supabase_schemas import SUPABASE_SCHEMAS
    print("‚úÖ Esquemas cargados desde archivo est√°tico")
    ESQUEMAS_DISPONIBLES = True
except ImportError:
    print("‚ùå No se pudieron cargar los esquemas")
    ESQUEMAS_DISPONIBLES = False
    SUPABASE_SCHEMAS = {}

# Funciones helper si utils no est√° disponible
def obtener_columnas_tabla_local(tabla_nombre):
    """Funci√≥n local para obtener columnas si utils no est√° disponible"""
    if tabla_nombre in SUPABASE_SCHEMAS:
        columnas = SUPABASE_SCHEMAS[tabla_nombre]
        if isinstance(columnas, dict) and "estructura" not in columnas:
            return list(columnas.keys())
    return []

def verificar_columna_existe_local(tabla_nombre, columna_nombre):
    """Funci√≥n local para verificar columnas si utils no est√° disponible"""
    columnas = obtener_columnas_tabla_local(tabla_nombre)
    return columna_nombre in columnas

def listar_tablas_disponibles_local():
    """Funci√≥n local para listar tablas si utils no est√° disponible"""
    return list(SUPABASE_SCHEMAS.keys())

# Usar funciones locales si utils no est√° disponible
if not UTILS_DISPONIBLES:
    obtener_columnas_tabla = obtener_columnas_tabla_local
    verificar_columna_existe = verificar_columna_existe_local
    listar_tablas_disponibles = listar_tablas_disponibles_local

def ejemplo_uso_basico():
    """Ejemplo b√°sico de uso de esquemas"""
    print("\nüîç EJEMPLO DE USO B√ÅSICO")
    print("=" * 50)
    
    # Listar todas las tablas disponibles
    tablas = listar_tablas_disponibles()
    print(f"üìã Tablas disponibles: {len(tablas)}")
    for tabla in sorted(tablas)[:5]:  # Mostrar solo las primeras 5
        print(f"  - {tabla}")
    
    # Obtener columnas de una tabla espec√≠fica
    if 'meta_ads_cuentas' in tablas:
        columnas = obtener_columnas_tabla('meta_ads_cuentas')
        print(f"\nüìä Columnas en 'meta_ads_cuentas': {len(columnas)}")
        for col in columnas[:5]:  # Mostrar solo las primeras 5
            print(f"  - {col}")
    
    # Verificar si una columna existe
    existe = verificar_columna_existe('meta_ads_cuentas', 'nombre_visible')
    print(f"\n‚úÖ ¬øExiste 'nombre_visible' en 'meta_ads_cuentas'? {existe}")

def ejemplo_construccion_queries():
    """Ejemplo de c√≥mo construir queries seguras usando los esquemas"""
    print("\nüõ†Ô∏è EJEMPLO DE CONSTRUCCI√ìN DE QUERIES")
    print("=" * 50)
    
    tabla = 'meta_ads_cuentas'
    columnas = obtener_columnas_tabla(tabla)
    
    if columnas:
        # Construir SELECT seguro
        columnas_select = ', '.join(columnas[:5])  # Primeras 5 columnas
        query_select = f"SELECT {columnas_select} FROM {tabla}"
        print(f"üìù Query SELECT generado:\n{query_select}")
        
        # Construir INSERT seguro
        placeholders = ', '.join(['%s'] * len(columnas))
        query_insert = f"INSERT INTO {tabla} ({', '.join(columnas)}) VALUES ({placeholders})"
        print(f"\nüìù Query INSERT template:\n{query_insert}")

def ejemplo_validacion_datos():
    """Ejemplo de validaci√≥n de datos antes de insertar"""
    print("\nüîí EJEMPLO DE VALIDACI√ìN DE DATOS")
    print("=" * 50)
    
    tabla = 'contactos'
    datos = {
        'nombre': 'Juan P√©rez',
        'telefono': '+52123456789',
        'correo': 'juan@example.com',
        'columna_inexistente': 'valor'  # Esta deber√≠a fallar
    }
    
    columnas_tabla = obtener_columnas_tabla(tabla)
    
    if columnas_tabla:
        datos_validos = {}
        datos_invalidos = {}
        
        for campo, valor in datos.items():
            if verificar_columna_existe(tabla, campo):
                datos_validos[campo] = valor
            else:
                datos_invalidos[campo] = valor
        
        print(f"‚úÖ Datos v√°lidos para '{tabla}':")
        for campo, valor in datos_validos.items():
            print(f"  - {campo}: {valor}")
        
        if datos_invalidos:
            print(f"\n‚ùå Datos inv√°lidos (columnas no existen):")
            for campo, valor in datos_invalidos.items():
                print(f"  - {campo}: {valor}")

def ejemplo_helper_supabase():
    """Ejemplo de funci√≥n helper para operaciones comunes"""
    print("\nüöÄ EJEMPLO DE FUNCI√ìN HELPER")
    print("=" * 50)
    
    def crear_insert_query(tabla, datos):
        """Crea un query INSERT seguro validando las columnas"""
        columnas_tabla = obtener_columnas_tabla(tabla)
        
        if not columnas_tabla:
            raise ValueError(f"Tabla '{tabla}' no encontrada en esquemas")
        
        # Filtrar solo datos v√°lidos
        datos_validos = {
            campo: valor for campo, valor in datos.items()
            if verificar_columna_existe(tabla, campo)
        }
        
        if not datos_validos:
            raise ValueError("No hay datos v√°lidos para insertar")
        
        columnas = list(datos_validos.keys())
        valores = list(datos_validos.values())
        placeholders = ', '.join(['%s'] * len(valores))
        
        query = f"INSERT INTO {tabla} ({', '.join(columnas)}) VALUES ({placeholders})"
        
        return query, valores
    
    # Ejemplo de uso
    try:
        datos_ejemplo = {
            'nombre': 'Cliente Test',
            'telefono': '+52123456789',
            'correo': 'test@example.com'
        }
        
        query, valores = crear_insert_query('contactos', datos_ejemplo)
        print(f"üìù Query generado: {query}")
        print(f"üìä Valores: {valores}")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    print("üéØ EJEMPLOS DE USO DE ESQUEMAS SUPABASE")
    print("=" * 60)
    
    ejemplo_uso_basico()
    ejemplo_construccion_queries()
    ejemplo_validacion_datos()
    ejemplo_helper_supabase()
    
    print("\n" + "=" * 60)
    print("‚úÖ Ejemplos completados. ¬°Usa estos patrones en tu c√≥digo!")
