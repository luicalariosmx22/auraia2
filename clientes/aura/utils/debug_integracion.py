import os
import json
import openai
from twilio.rest import Client
from clientes.aura.handlers.handle_keywords import manejar_respuesta_keywords
from clientes.aura.handlers.handle_ai import manejar_respuesta_ai
from clientes.aura.utils.normalize import normalizar_numero

def check_archivo(path, descripcion):
    if not os.path.exists(path):
        return f"‚ùå {descripcion} ‚Üí No encontrado ({path})\n"
    return f"‚úÖ {descripcion} ‚Üí OK\n"

def revisar_bot_data():
    ruta = "clientes/aura/config/bot_data.json"
    resultado = check_archivo(ruta, "bot_data.json")
    try:
        with open(ruta, "r", encoding="utf-8") as f:
            data = json.load(f)
        if any("hola" in v.get("palabras_clave", []) for v in data.values()):
            resultado += "‚úÖ Palabra clave 'hola' encontrada\n"
        else:
            resultado += "‚ö†Ô∏è 'hola' no est√° entre las palabras clave\n"
    except Exception as e:
        resultado += f"‚ùå Error al leer bot_data.json: {e}\n"
    return resultado

def revisar_conocimiento_txt():
    ruta = "clientes/aura/config/servicios_conocimiento.txt"
    resultado = check_archivo(ruta, "Base de conocimiento IA")
    try:
        with open(ruta, "r", encoding="utf-8") as f:
            contenido = f.read()
        if len(contenido) < 30:
            resultado += "‚ö†Ô∏è Archivo cargado pero demasiado corto\n"
        else:
            resultado += "‚úÖ Contenido de conocimiento cargado correctamente\n"
    except Exception as e:
        resultado += f"‚ùå Error al leer servicios_conocimiento.txt: {e}\n"
    return resultado

def revisar_settings():
    ruta = "clientes/aura/config/settings.json"
    resultado = check_archivo(ruta, "settings.json")
    try:
        with open(ruta, "r", encoding="utf-8") as f:
            settings = json.load(f)
        for clave in ["usar_ai", "usar_respuestas_automaticas", "usar_manejo_archivos"]:
            valor = settings.get(clave)
            resultado += f"{'‚úÖ' if valor else '‚ö†Ô∏è'} {clave} ‚Üí {valor}\n"
    except Exception as e:
        resultado += f"‚ùå Error al leer settings.json: {e}\n"
    return resultado

def revisar_variables_entorno():
    claves = [
        "OPENAI_API_KEY",
        "TWILIO_ACCOUNT_SID",
        "TWILIO_AUTH_TOKEN",
        "TWILIO_PHONE_NUMBER"
    ]
    resultado = "üîê VARIABLES DE ENTORNO:\n"
    for clave in claves:
        valor = os.getenv(clave)
        resultado += f"{'‚úÖ' if valor else '‚ùå'} {clave} {'definida' if valor else 'NO definida'}\n"
    return resultado

def revisar_conexion_openai():
    try:
        openai.api_key = os.getenv("OPENAI_API_KEY")
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Prueba de conexi√≥n"}],
            temperature=0.0
        )
        if respuesta.choices:
            return "‚úÖ OpenAI respondi√≥ correctamente\n"
        return "‚ö†Ô∏è OpenAI respondi√≥ vac√≠o\n"
    except Exception as e:
        return f"‚ùå Error al conectar con OpenAI:\n{e}\n"

def revisar_conexion_twilio():
    try:
        client = Client(
            os.getenv("TWILIO_ACCOUNT_SID"),
            os.getenv("TWILIO_AUTH_TOKEN")
        )
        client.api.accounts.list(limit=1)
        return "‚úÖ Twilio conectado correctamente\n"
    except Exception as e:
        return f"‚ùå Error al conectar con Twilio:\n{e}\n"

def revisar_funciones_clave():
    resultado = "‚öôÔ∏è FUNCIONES CLAVE DEL BOT:\n"

    try:
        resp1 = manejar_respuesta_keywords("hola")
        if resp1:
            resultado += "‚úÖ manejar_respuesta_keywords('hola') devolvi√≥ respuesta\n"
        else:
            resultado += "‚ö†Ô∏è manejar_respuesta_keywords('hola') devolvi√≥ None\n"
    except Exception as e:
        resultado += f"‚ùå Error en manejar_respuesta_keywords: {e}\n"

    try:
        resp2 = manejar_respuesta_ai("¬øQu√© servicios ofrecen?")
        if resp2:
            resultado += "‚úÖ manejar_respuesta_ai() devolvi√≥ respuesta\n"
        else:
            resultado += "‚ö†Ô∏è manejar_respuesta_ai() devolvi√≥ None\n"
    except Exception as e:
        resultado += f"‚ùå Error en manejar_respuesta_ai: {e}\n"

    return resultado

def revisar_historial():
    historial_dir = "clientes/aura/database/historial"
    if not os.path.exists(historial_dir):
        return "‚ùå Carpeta de historial no encontrada\n"
    archivos = os.listdir(historial_dir)
    if not archivos:
        return "‚ö†Ô∏è Carpeta de historial vac√≠a\n"
    return f"‚úÖ {len(archivos)} archivos de historial encontrados\n"

def revisar_normalizador():
    entrada = "whatsapp:+5216621234567"
    salida = normalizar_numero(entrada)

    if salida != entrada:
        return (
            "üìû NORMALIZADOR DE N√öMEROS:\n"
            f"‚ùå Error: se perdi√≥ el prefijo 'whatsapp:'\n"
            f"Entrada: {entrada}\nSalida: {salida}\n"
        )
    return (
        "üìû NORMALIZADOR DE N√öMEROS:\n"
        f"‚úÖ Entrada: {entrada}\n"
        f"‚úÖ Salida:  {salida}\n"
    )

def revisar_todo():
    salida = ""
    salida += "üìÅ ARCHIVOS Y CONFIGURACI√ìN:\n"
    salida += revisar_settings()
    salida += revisar_bot_data()
    salida += revisar_conocimiento_txt()
    salida += check_archivo("clientes/aura/database/historial", "Carpeta historial")
    salida += "\n"
    salida += "üß† CONFIGURACI√ìN DE NORA:\n"
    salida += revisar_settings()
    salida += "\n"
    salida += revisar_variables_entorno()
    salida += "\n"
    salida += "üîå CONEXI√ìN CON OPENAI:\n"
    salida += revisar_conexion_openai()
    salida += "\n"
    salida += "üìû CONEXI√ìN CON TWILIO:\n"
    salida += revisar_conexion_twilio()
    salida += "\n"
    salida += revisar_funciones_clave()
    salida += "\n"
    salida += "üïë HISTORIAL DE CONVERSACIONES:\n"
    salida += revisar_historial()
    salida += "\n"
    salida += revisar_normalizador()

    return salida
