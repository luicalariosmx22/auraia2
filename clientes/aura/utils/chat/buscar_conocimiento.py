from clientes.aura.utils.supabase import supabase

def obtener_base_conocimiento(numero_nora: str, titulo: str = None):
    """
    Recupera bloques de conocimiento desde la tabla 'conocimiento_nora'.
    Si no hay resultados, devuelve un bloque por defecto para evitar fallos.
    """
    try:
        consulta = supabase.table("conocimiento_nora").select("contenido, titulo").eq("numero_nora", numero_nora)

        if titulo:
            consulta = consulta.eq("titulo", titulo)

        respuesta = consulta.execute()
        datos = respuesta.data

        if datos:
            print(f"‚úÖ [ConocimientoNora] Se cargaron {len(datos)} bloques para {numero_nora}.")
            for bloque in datos:
                print(f"   - T√≠tulo: {bloque.get('titulo', 'Sin t√≠tulo')}")
            bloques = [{"titulo": item.get("titulo", "Sin t√≠tulo"), "contenido": item["contenido"].strip()} for item in datos if item.get("contenido")]
            return bloques

        print(f"‚ö†Ô∏è [ConocimientoNora] No hay bloques para {numero_nora} con el t√≠tulo especificado.")
        return [{
            "titulo": "respuesta_default",
            "contenido": "Hola, soy Nora. ¬øEn qu√© puedo ayudarte hoy? Puedo darte informaci√≥n sobre cursos, automatizaci√≥n o estrategias digitales."
        }]

    except Exception as e:
        print(f"‚ùå [ConocimientoNora] Error al obtener contenido: {e}")
        return [{
            "titulo": "error_fallback",
            "contenido": "Ocurri√≥ un error al consultar la informaci√≥n. Pero aqu√≠ estoy para ayudarte. ¬øQu√© te gustar√≠a saber?"
        }]


def buscar_conocimiento(numero_nora: str, mensaje_usuario: str):
    """
    Recupera la configuraci√≥n general de la Nora y genera un prompt con personalidad e instrucciones
    usando el campo base_conocimiento de configuracion_bot (texto plano).
    """
    try:
        print(f"üìö Usando contenido plano como contexto para Nora {numero_nora}")
        response = supabase.table("configuracion_bot") \
            .select("base_conocimiento, personalidad, instrucciones") \
            .eq("numero_nora", numero_nora) \
            .single() \
            .execute()

        if not response.data:
            print(f"‚ö†Ô∏è No se encontr√≥ configuraci√≥n para {numero_nora}")
            return None

        config = response.data
        personalidad = config.get("personalidad", "").strip()
        instrucciones = config.get("instrucciones", "").strip()
        base_conocimiento = config.get("base_conocimiento", "").strip()

        # Verificar si personalidad e instrucciones fueron cargadas correctamente
        if not personalidad:
            print("‚ö†Ô∏è La personalidad no est√° definida. Usando valor por defecto: 'profesional y amigable'.")
            personalidad = "profesional y amigable"

        if not instrucciones:
            print("‚ö†Ô∏è Las instrucciones no est√°n definidas. Usando valor por defecto: 'Responde de forma clara y √∫til.'")
            instrucciones = "Responde de forma clara y √∫til."

        if not base_conocimiento:
            print("‚ö†Ô∏è La base_conocimiento est√° vac√≠a.")
            return None

        prompt = f"""
Eres Nora, una asistente profesional.

Tu personalidad: {personalidad}
Instrucciones clave: {instrucciones}

Conocimiento disponible:
{base_conocimiento}

Pregunta del usuario:
{mensaje_usuario}

Respuesta:"""

        print("‚úÖ Prompt final generado.")
        return prompt

    except Exception as e:
        print(f"‚ùå Error generando el prompt: {e}")
        return None
