"""
Sistema de ejecuci√≥n de automatizaciones
Ejecuta las tareas programadas seg√∫n su frecuencia y par√°metros
"""

import os
import json
import importlib
from datetime import datetime, timedelta
from clientes.aura.utils.supabase_client import supabase

class EjecutorAutomatizaciones:
    """
    Clase para manejar la ejecuci√≥n de automatizaciones
    """
    
    def __init__(self):
        self.modulos_disponibles = {
            'automatizaciones_ejecutor': 'clientes.aura.utils.automatizaciones_ejecutor',
            'reportes': 'clientes.aura.utils.reportes',
            'notificaciones': 'clientes.aura.utils.notificaciones',
            'google_ads': 'clientes.aura.utils.google_ads_utils',
            'meta_ads': 'clientes.aura.routes.panel_cliente_meta_ads.panel_cliente_meta_ads',
            'meta_ads_sincronizador': 'clientes.aura.routes.panel_cliente_meta_ads.sincronizador_semanal',
            'sincronizador_semanal': 'clientes.aura.routes.panel_cliente_meta_ads.sincronizador_semanal',
            'tareas': 'clientes.aura.utils.tareas_utils',
            'backup': 'clientes.aura.utils.backup_utils',
            'contactos': 'clientes.aura.routes.panel_cliente_contactos.panel_cliente_contactos',
            'pagos': 'clientes.aura.routes.panel_cliente_pagos.panel_cliente_pagos'
        }
    
    def ejecutar_automatizaciones_pendientes(self):
        """
        Ejecuta todas las automatizaciones que tienen fecha/hora de ejecuci√≥n vencida
        """
        try:
            # Obtener automatizaciones activas y pendientes
            ahora = datetime.now()
            
            response = supabase.table("automatizaciones") \
                .select("*") \
                .eq("activo", True) \
                .lte("proxima_ejecucion", ahora.isoformat()) \
                .execute()
            
            automatizaciones_pendientes = response.data if response.data else []
            
            print(f"ü§ñ Encontradas {len(automatizaciones_pendientes)} automatizaciones pendientes")
            
            resultados = []
            
            for automatizacion in automatizaciones_pendientes:
                resultado = self.ejecutar_automatizacion(automatizacion)
                resultados.append(resultado)
                
                # Actualizar pr√≥xima ejecuci√≥n si fue exitosa
                if resultado['success']:
                    self.actualizar_proxima_ejecucion(automatizacion)
            
            return {
                'success': True,
                'ejecutadas': len([r for r in resultados if r['success']]),
                'fallidas': len([r for r in resultados if not r['success']]),
                'resultados': resultados
            }
            
        except Exception as e:
            print(f"‚ùå Error al ejecutar automatizaciones: {e}")
            return {
                'success': False,
                'error': str(e),
                'ejecutadas': 0,
                'fallidas': 0,
                'resultados': []
            }
    
    def ejecutar_automatizacion(self, automatizacion):
        """
        Ejecuta una automatizaci√≥n espec√≠fica
        """
        try:
            print(f"üîÑ Ejecutando: {automatizacion['nombre']}")
            
            # Obtener m√≥dulo y funci√≥n
            modulo_nombre = automatizacion.get('modulo_relacionado')
            funcion_nombre = automatizacion.get('funcion_objetivo')
            parametros = automatizacion.get('parametros_json', {})
            
            if not modulo_nombre or not funcion_nombre:
                raise ValueError("M√≥dulo o funci√≥n no especificados")
            
            # Importar m√≥dulo din√°micamente
            if modulo_nombre in self.modulos_disponibles:
                modulo_path = self.modulos_disponibles[modulo_nombre]
                modulo = importlib.import_module(modulo_path)
            else:
                # Intentar importar directamente
                modulo = importlib.import_module(modulo_nombre)
            
            # Obtener funci√≥n
            if not hasattr(modulo, funcion_nombre):
                raise AttributeError(f"Funci√≥n '{funcion_nombre}' no encontrada en '{modulo_nombre}'")
            
            funcion = getattr(modulo, funcion_nombre)
            
            # Ejecutar funci√≥n con par√°metros
            if parametros:
                resultado_funcion = funcion(**parametros)
            else:
                resultado_funcion = funcion()
            
            # Actualizar registro de ejecuci√≥n
            self.registrar_ejecucion(automatizacion['id'], True, str(resultado_funcion))
            
            return {
                'success': True,
                'automatizacion_id': automatizacion['id'],
                'nombre': automatizacion['nombre'],
                'resultado': resultado_funcion,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå Error ejecutando {automatizacion['nombre']}: {e}")
            
            # Registrar error
            self.registrar_ejecucion(automatizacion['id'], False, str(e))
            
            return {
                'success': False,
                'automatizacion_id': automatizacion['id'],
                'nombre': automatizacion['nombre'],
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def registrar_ejecucion(self, automatizacion_id, success, detalle):
        """
        Registra la ejecuci√≥n de una automatizaci√≥n en la base de datos
        """
        try:
            ahora = datetime.now()
            
            # Actualizar √∫ltima ejecuci√≥n
            supabase.table("automatizaciones") \
                .update({
                    "ultima_ejecucion": ahora.isoformat(),
                    "actualizado_en": ahora.isoformat()
                }) \
                .eq("id", automatizacion_id) \
                .execute()
            
            # Aqu√≠ podr√≠as crear una tabla de logs de ejecuci√≥n si la necesitas
            # supabase.table("logs_automatizaciones").insert({...}).execute()
            
            print(f"‚úÖ Registro de ejecuci√≥n actualizado para {automatizacion_id}")
            
        except Exception as e:
            print(f"‚ùå Error al registrar ejecuci√≥n: {e}")
    
    def actualizar_proxima_ejecucion(self, automatizacion):
        """
        Calcula y actualiza la pr√≥xima fecha de ejecuci√≥n
        """
        try:
            from clientes.aura.routes.panel_cliente_automatizaciones.panel_cliente_automatizaciones import calcular_proxima_ejecucion
            
            proxima = calcular_proxima_ejecucion(
                automatizacion['frecuencia'],
                automatizacion['hora_ejecucion']
            )
            
            supabase.table("automatizaciones") \
                .update({
                    "proxima_ejecucion": proxima.isoformat(),
                    "actualizado_en": datetime.now().isoformat()
                }) \
                .eq("id", automatizacion['id']) \
                .execute()
            
            print(f"üïí Pr√≥xima ejecuci√≥n programada: {proxima.strftime('%Y-%m-%d %H:%M:%S')}")
            
        except Exception as e:
            print(f"‚ùå Error al actualizar pr√≥xima ejecuci√≥n: {e}")
    
    def ejecutar_por_id(self, automatizacion_id):
        """
        Ejecuta una automatizaci√≥n espec√≠fica por su ID
        """
        try:
            response = supabase.table("automatizaciones") \
                .select("*") \
                .eq("id", automatizacion_id) \
                .execute()
            
            if not response.data:
                return {
                    'success': False,
                    'error': 'Automatizaci√≥n no encontrada'
                }
            
            automatizacion = response.data[0]
            return self.ejecutar_automatizacion(automatizacion)
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

# Funciones de ejemplo para automatizaciones
def ejemplo_reporte_diario():
    """
    Funci√≥n de ejemplo para generar reporte diario
    """
    print("üìä Generando reporte diario...")
    # Aqu√≠ ir√≠a la l√≥gica real del reporte
    return "Reporte diario generado exitosamente"

def ejemplo_backup_semanal():
    """
    Funci√≥n de ejemplo para backup semanal
    """
    print("üíæ Ejecutando backup semanal...")
    # Aqu√≠ ir√≠a la l√≥gica real del backup
    return "Backup semanal completado"

def ejemplo_limpieza_logs(dias_antiguedad=30):
    """
    Funci√≥n de ejemplo para limpiar logs antiguos
    """
    print(f"üßπ Limpiando logs de m√°s de {dias_antiguedad} d√≠as...")
    # Aqu√≠ ir√≠a la l√≥gica real de limpieza
    return f"Logs antiguos limpiados (m√°s de {dias_antiguedad} d√≠as)"

def ejemplo_sincronizacion_datos():
    """
    Funci√≥n de ejemplo para sincronizar datos
    """
    print("üîÑ Sincronizando datos...")
    # Aqu√≠ ir√≠a la l√≥gica real de sincronizaci√≥n
    return "Sincronizaci√≥n de datos completada"

# Instancia global del ejecutor
ejecutor = EjecutorAutomatizaciones()
