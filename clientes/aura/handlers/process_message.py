# üìÅ clientes/aura/handlers/process_message.py

print("‚úÖ process_message.py cargado correctamente al chile y ajustado para actualizaci√≥n real")

from datetime import datetime
from clientes.aura.utils.normalizador import normalizar_numero
from clientes.aura.utils.limpieza import limpiar_mensaje
from clientes.aura.utils.historial import guardar_en_historial
from clientes.aura.utils.twilio_sender import enviar_mensaje
from clientes.aura.handlers.handle_ai import manejar_respuesta_ai
from clientes.aura.utils.buscar_conocimiento import construir_menu_desde_etiquetas, obtener_conocimiento_por_etiqueta
from clientes.aura.utils.supabase_client import supabase

def obtener_config_nora(nombre_nora):
    """
    Obtiene la configuraci√≥n de Nora desde Supabase.
    """
    try:
        response = supabase.table("configuracion_bot") \
            .select("*") \
            .eq("nombre_nora", nombre_nora.lower()) \
            .execute()
        data = response.data
        return data[0] if data else {}
    except Exception as e:
        print(f"‚ùå Error al obtener configuraci√≥n: {e}")
        return {}
construir_menu_desde_etiquetas
def actualizar_contacto(numero_usuario, nombre_nora, mensaje_usuario, imagen_perfil=None, nombre_contacto=None):
    """
    Actualiza √∫ltimo mensaje, fecha y foto del contacto. Si no existe, lo crea autom√°ticamente.
    """
    try:
        # Intentar buscar contacto exacto
        print(f"üîç Intentando actualizar contacto exacto para {numero_usuario} en Nora {nombre_nora}...")
        response = supabase.table("contactos") \
            .select("id") \
            .eq("telefono", numero_usuario) \
            .eq("nombre_nora", nombre_nora) \
            .execute()
        print(f"üîç Respuesta exacta: {response.data}")

        if not response.data:
            # Si no encontr√≥ exacto, buscar por los √∫ltimos 10 d√≠gitos
            ultimos_10 = numero_usuario[-10:]
            print(f"üîç Buscando contacto por √∫ltimos 10 d√≠gitos: {ultimos_10}")
            response = supabase.table("contactos") \
                .select("id") \
                .like("telefono", f"%{ultimos_10}") \
                .eq("nombre_nora", nombre_nora) \
                .execute()
            print(f"üîç Respuesta por √∫ltimos 10 d√≠gitos: {response.data}")

        if response.data:
            contacto_id = response.data[0]["id"]
            update_data = {
                "ultimo_mensaje": datetime.now().isoformat(),
                "mensaje_reciente": mensaje_usuario
            }
            if imagen_perfil:
                update_data["imagen_perfil"] = imagen_perfil

            print(f"üîÑ Actualizando contacto ID {contacto_id} con datos: {update_data}")
            update_response = supabase.table("contactos").update(update_data).eq("id", contacto_id).execute()
            print(f"‚úÖ Respuesta de actualizaci√≥n: {update_response.data}")
            if update_response.data:
                print(f"‚úÖ Contacto {numero_usuario} actualizado correctamente.")
            else:
                print(f"‚ö†Ô∏è La actualizaci√≥n no devolvi√≥ datos. Verifica la consulta.")
        else:
            # üî• No existe: crear nuevo contacto autom√°ticamente
            print(f"üÜï Contacto no encontrado. Creando nuevo contacto para {numero_usuario} en Nora {nombre_nora}...")
            nuevo_contacto = {
                "telefono": numero_usuario,
                "nombre_nora": nombre_nora,
                "ultimo_mensaje": datetime.now().isoformat(),  # Fixed key
                "mensaje_reciente": mensaje_usuario  # Fixed key
            }
            if nombre_contacto:
                nuevo_contacto["nombre"] = nombre_contacto  # ‚úÖ La columna REAL es 'nombre'
            if imagen_perfil:
                nuevo_contacto["imagen_perfil"] = imagen_perfil

            print(f"‚ûï Creando nuevo contacto con datos: {nuevo_contacto}")
            insert_response = supabase.table("contactos").insert(nuevo_contacto).execute()
            print(f"‚úÖ Respuesta de creaci√≥n: {insert_response.data}")

    except Exception as e:
        print(f"‚ùå Error actualizando/creando contacto: {e}")

def procesar_mensaje(data):
    """
    Procesa el mensaje recibido, limpia el texto, normaliza el n√∫mero, obtiene historial y llama a la IA.
    """
    numero_usuario = normalizar_numero(data.get("From"))
    mensaje_usuario = limpiar_mensaje(data.get("Body"))
    nombre_usuario = data.get("ProfileName", "Usuario")
    imagen_perfil = data.get("ProfilePicUrl")  # üî• Ahora tambi√©n leemos la foto si viene
    numero_nora_recibido = normalizar_numero(data.get("To"))

    # üîç Buscar en Supabase cu√°l es el nombre_nora usando el n√∫mero To
    try:
        response = supabase.table("configuracion_bot") \
            .select("nombre_nora, numero_nora") \
            .eq("numero_nora", numero_nora_recibido) \
            .limit(1) \
            .execute()
        if response.data:
            nombre_nora = response.data[0]["nombre_nora"].lower()
            numero_nora = response.data[0]["numero_nora"]
            print(f"üîß Configuraci√≥n encontrada: nombre_nora={nombre_nora}, numero_nora={numero_nora}")
        else:
            print(f"‚ö†Ô∏è No se encontr√≥ configuraci√≥n para {numero_nora_recibido}. Usando valor por defecto.")
            nombre_nora = "nora"
            numero_nora = numero_nora_recibido
    except Exception as e:
        print(f"‚ùå Error buscando configuraci√≥n: {e}")
        nombre_nora = "nora"
        numero_nora = numero_nora_recibido

    # Verificar si es la primera interacci√≥n
    historial = supabase.table("historial_conversaciones") \
        .select("id") \
        .eq("telefono", numero_usuario) \
        .eq("nombre_nora", nombre_nora) \
        .limit(1) \
        .execute().data

    if not historial:
        mensaje_bienvenida = config.get("mensaje_bienvenida", "").strip() if 'config' in locals() else ""
        if mensaje_bienvenida:
            print("üì© Enviando mensaje de bienvenida visible...")
            enviar_mensaje(numero_usuario, mensaje_bienvenida)
            guardar_en_historial(
                telefono=numero_usuario,
                mensaje=mensaje_bienvenida,
                origen=numero_nora,
                nombre_nora=nombre_nora,
                tipo="respuesta"
            )

    # Guardar mensaje entrante en historial
    guardar_en_historial(
        telefono=numero_usuario,
        mensaje=mensaje_usuario,
        origen=numero_usuario,
        nombre_nora=nombre_nora,
        tipo="usuario"
    )

    # Actualizar contacto con el √∫ltimo mensaje y foto de perfil
    actualizar_contacto(numero_usuario, nombre_nora, mensaje_usuario, imagen_perfil, nombre_contacto=nombre_usuario)

    # --- MEN√ö DE CONOCIMIENTO (etiquetas) ---
    # Detectar si el mensaje es para mostrar el men√∫
    if mensaje_usuario.lower() in ["menu", "opciones", "categor√≠as"]:
        mensaje_menu = construir_menu_desde_etiquetas(nombre_nora)
        enviar_mensaje(numero_usuario, mensaje_menu)
        guardar_en_historial(numero_usuario, mensaje_menu, numero_nora, nombre_nora, "respuesta")
        return mensaje_menu

    # Detectar si es respuesta a un men√∫ (n√∫mero o etiqueta)
    try:
        etiquetas_res = supabase.table("etiquetas_nora") \
            .select("etiqueta") \
            .eq("nombre_nora", nombre_nora) \
            .eq("activo", True) \
            .execute()

        etiquetas = [et["etiqueta"] for et in etiquetas_res.data] if etiquetas_res.data else []
        seleccion = mensaje_usuario.strip().lower()

        if seleccion.isdigit():
            index = int(seleccion) - 1
            if 0 <= index < len(etiquetas):
                etiqueta_seleccionada = etiquetas[index]
            else:
                etiqueta_seleccionada = None
        else:
            etiqueta_seleccionada = next((et for et in etiquetas if seleccion in et.lower()), None)

        if etiqueta_seleccionada:
            contenido = obtener_conocimiento_por_etiqueta(nombre_nora, etiqueta_seleccionada)
            if contenido:
                enviar_mensaje(numero_usuario, contenido)
                guardar_en_historial(numero_usuario, contenido, numero_nora, nombre_nora, "respuesta")
                return contenido

    except Exception as e:
        print(f"‚ùå Error interpretando respuesta al men√∫ de conocimiento: {e}")

    # Generar respuesta desde IA
    respuesta, historial = manejar_respuesta_ai(
        mensaje_usuario=mensaje_usuario,
        numero_nora=numero_nora
    )

    if not respuesta:
        print("‚ö†Ô∏è No se pudo generar una respuesta. Usando mensaje predeterminado.")
        respuesta = "Lo siento, no puedo responder en este momento. Por favor, intenta m√°s tarde."

    # Guardar respuesta en historial
    guardar_en_historial(
        telefono=numero_usuario,
        mensaje=respuesta,
        origen=numero_nora,
        nombre_nora=nombre_nora,
        tipo="respuesta"
    )

    # Enviar respuesta al usuario
    enviar_mensaje(numero_usuario, respuesta)

    # üß† Detectar si el √∫ltimo bloque fue un MEN√ö y responder sin IA
    try:
        historial_menus = supabase.table("historial_conversaciones") \
            .select("mensaje, origen, tipo") \
            .eq("telefono", numero_usuario) \
            .eq("nombre_nora", nombre_nora) \
            .order("timestamp", desc=True) \
            .limit(5) \
            .execute().data

        ultimo_menu = next((h for h in historial_menus if h["origen"] == numero_nora and h["tipo"] == "respuesta" and "¬ø" in h["mensaje"]), None)

        if ultimo_menu:
            print("üß≠ √öltimo mensaje fue un MEN√ö. Intentando interpretar respuesta del usuario...")

            # Buscar men√∫ correspondiente
            bloques_menu = supabase.table("conocimiento_nora") \
                .select("*") \
                .eq("nombre_nora", nombre_nora) \
                .eq("origen", "menu") \
                .eq("activo", True) \
                .execute().data

            # Match exacto del √∫ltimo contenido
            menu_bloque = next((b for b in bloques_menu if b["contenido"] in ultimo_menu["mensaje"]), None)

            if menu_bloque:
                opciones = menu_bloque.get("opciones", [])
                etiquetas = menu_bloque.get("etiquetas", [])
                seleccion = mensaje_usuario.strip().lower()

                # Match por n√∫mero ("1", "2", ...)
                if seleccion.isdigit():
                    idx = int(seleccion) - 1
                    if 0 <= idx < len(opciones):
                        opcion_elegida = opciones[idx]
                    else:
                        opcion_elegida = None
                else:
                    # Match por texto aproximado
                    opcion_elegida = next((opt for opt in opciones if seleccion in opt.lower()), None)

                if opcion_elegida:
                    print(f"‚úÖ Opci√≥n detectada: {opcion_elegida}")

                    # Buscar bloque de conocimiento relacionado
                    resultados = supabase.table("conocimiento_nora") \
                        .select("*") \
                        .eq("nombre_nora", nombre_nora) \
                        .eq("activo", True) \
                        .execute().data

                    coincidencia = next(
                        (b for b in resultados if opcion_elegida.lower() in b.get("contenido", "").lower()
                         or opcion_elegida.lower() in " ".join(b.get("etiquetas", [])).lower()),
                        None
                    )

                    if coincidencia:
                        respuesta = coincidencia["contenido"]
                        guardar_en_historial(numero_usuario, respuesta, numero_nora, nombre_nora, "respuesta")
                        enviar_mensaje(numero_usuario, respuesta)
                        return respuesta

                print("‚ö†Ô∏è No se encontr√≥ opci√≥n v√°lida o bloque relacionado.")
                fallback = "No entend√≠ tu respuesta. ¬øPuedes elegir una opci√≥n del men√∫ anterior?"
                guardar_en_historial(numero_usuario, fallback, numero_nora, nombre_nora, "respuesta")
                enviar_mensaje(numero_usuario, fallback)
                return fallback

    except Exception as e:
        print(f"‚ùå Error interpretando men√∫: {e}")

    return respuesta
