#!/usr/bin/env python3
"""
Verificador completo del deployment de Railway para WhatsApp Backend
Verifica que el backend est√© funcionando correctamente con Chrome y QR real
"""

import requests
import json
import time
import base64
from datetime import datetime
import re
import os

# Configuraci√≥n del backend Railway
RAILWAY_URL = "https://whatsapp-backend-production-8a3a.up.railway.app"
ENDPOINTS = {
    'health': f"{RAILWAY_URL}/health",
    'qr': f"{RAILWAY_URL}/qr",
    'status': f"{RAILWAY_URL}/status"
}

def print_header(title):
    """Imprime un encabezado formateado"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_section(title):
    """Imprime una secci√≥n formateada"""
    print(f"\n{'-'*40}")
    print(f"  {title}")
    print(f"{'-'*40}")

def test_endpoint(name, url, timeout=10):
    """Prueba un endpoint espec√≠fico"""
    print(f"\nüîç Probando endpoint: {name}")
    print(f"URL: {url}")
    
    try:
        response = requests.get(url, timeout=timeout)
        print(f"‚úÖ Status Code: {response.status_code}")
        print(f"‚úÖ Response Time: {response.elapsed.total_seconds():.2f}s")
        
        # Verificar el tipo de contenido
        content_type = response.headers.get('content-type', '')
        print(f"‚úÖ Content-Type: {content_type}")
        
        # Intentar parsear como JSON
        try:
            json_data = response.json()
            print(f"‚úÖ JSON Response: {json.dumps(json_data, indent=2)}")
            return True, json_data
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è  No JSON response, texto plano:")
            print(f"Response: {response.text[:500]}")
            return False, response.text
            
    except requests.exceptions.ConnectionError:
        print(f"‚ùå Error de conexi√≥n: No se puede conectar a {url}")
        return False, None
    except requests.exceptions.Timeout:
        print(f"‚ùå Timeout: El endpoint tard√≥ m√°s de {timeout}s")
        return False, None
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False, None

def verify_qr_image(qr_data):
    """Verifica que el QR sea una imagen v√°lida"""
    if not qr_data:
        return False, "No hay datos de QR"
    
    try:
        # Verificar si es un data URL v√°lido
        if qr_data.startswith('data:image'):
            # Extraer la parte base64
            if ',' in qr_data:
                base64_data = qr_data.split(',')[1]
                # Intentar decodificar
                decoded = base64.b64decode(base64_data)
                size = len(decoded)
                print(f"‚úÖ QR v√°lido - Tama√±o: {size} bytes")
                return True, f"QR v√°lido, {size} bytes"
            else:
                return False, "Data URL malformado"
        else:
            return False, "No es un data URL v√°lido"
            
    except Exception as e:
        return False, f"Error al verificar QR: {e}"

def save_qr_image(qr_data, filename="qr_railway_test.png"):
    """Guarda la imagen QR en un archivo"""
    try:
        if qr_data and qr_data.startswith('data:image'):
            # Extraer la parte base64
            base64_data = qr_data.split(',')[1]
            decoded = base64.b64decode(base64_data)
            
            with open(filename, 'wb') as f:
                f.write(decoded)
            print(f"‚úÖ QR guardado en: {filename}")
            return True
        else:
            print(f"‚ùå No se pudo guardar QR - datos inv√°lidos")
            return False
    except Exception as e:
        print(f"‚ùå Error al guardar QR: {e}")
        return False

def check_railway_logs():
    """Verifica los logs de Railway (si est√°n disponibles)"""
    print_section("Informaci√≥n de Railway")
    print("üìù Para verificar logs de Railway:")
    print("1. Ve a: https://railway.app/dashboard")
    print("2. Selecciona tu proyecto")
    print("3. Ve a la pesta√±a 'Logs'")
    print("4. Verifica que no haya errores de Chrome o dependencias")

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print_header("VERIFICACI√ìN COMPLETA DE RAILWAY DEPLOYMENT")
    print(f"üïê Iniciado: {datetime.now()}")
    
    # Test 1: Health Check
    print_section("Test 1: Health Check")
    health_ok, health_data = test_endpoint("Health Check", ENDPOINTS['health'])
    
    if health_ok and isinstance(health_data, dict):
        if health_data.get('status') == 'ok':
            print("‚úÖ Backend est√° funcionando correctamente")
        else:
            print("‚ö†Ô∏è  Backend responde pero con estado anormal")
    else:
        print("‚ùå Backend no responde correctamente al health check")
    
    # Test 2: QR Endpoint
    print_section("Test 2: QR Generation")
    qr_ok, qr_data = test_endpoint("QR Generation", ENDPOINTS['qr'])
    
    if qr_ok and isinstance(qr_data, dict):
        qr_image = qr_data.get('qr')
        if qr_image:
            is_valid, message = verify_qr_image(qr_image)
            if is_valid:
                print("‚úÖ QR generado correctamente")
                save_qr_image(qr_image)
            else:
                print(f"‚ö†Ô∏è  QR problem√°tico: {message}")
        else:
            print("‚ùå Respuesta JSON sin campo 'qr'")
    else:
        print("‚ùå Endpoint QR no responde correctamente")
    
    # Test 3: Status Endpoint
    print_section("Test 3: Status Check")
    status_ok, status_data = test_endpoint("Status Check", ENDPOINTS['status'])
    
    if status_ok and isinstance(status_data, dict):
        client_ready = status_data.get('isClientReady', False)
        if client_ready:
            print("‚úÖ Cliente WhatsApp Web est√° listo")
        else:
            print("‚ö†Ô∏è  Cliente WhatsApp Web no est√° listo (esperando escaneo QR)")
    else:
        print("‚ùå Endpoint de status no responde correctamente")
    
    # Test 4: Verificar Chrome/Chromium
    print_section("Test 4: Verificaci√≥n de Chrome")
    print("üîç Verificando si Chrome est√° disponible en Railway...")
    
    # Intentar obtener informaci√≥n del user agent o similar
    try:
        # Hacer una petici√≥n que podr√≠a revelar informaci√≥n sobre el navegador
        response = requests.get(f"{RAILWAY_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ El servidor responde, Chrome probablemente est√° disponible")
        else:
            print(f"‚ö†Ô∏è  Respuesta inesperada: {response.status_code}")
    except:
        print("‚ùå No se puede verificar Chrome remotamente")
    
    # Resumen final
    print_section("RESUMEN FINAL")
    
    all_tests = [
        ("Health Check", health_ok),
        ("QR Generation", qr_ok),
        ("Status Check", status_ok)
    ]
    
    passed = sum(1 for _, ok in all_tests if ok)
    total = len(all_tests)
    
    print(f"üìä Tests pasados: {passed}/{total}")
    
    if passed == total:
        print("üéâ ¬°Todos los tests pasaron! El backend parece estar funcionando correctamente.")
        print("üöÄ Puedes proceder a probar la integraci√≥n con NORA")
    elif passed > 0:
        print("‚ö†Ô∏è  Algunos tests pasaron. Revisa los errores espec√≠ficos arriba.")
        print("üîß Puede que necesites ajustar la configuraci√≥n o esperar m√°s tiempo")
    else:
        print("‚ùå Ning√∫n test pas√≥. Hay problemas serios con el deployment.")
        print("üõ†Ô∏è  Revisa los logs de Railway y la configuraci√≥n")
    
    # Informaci√≥n adicional
    print_section("PR√ìXIMOS PASOS")
    
    if passed >= 2:
        print("‚úÖ El backend est√° funcionando. Pr√≥ximos pasos:")
        print("1. Probar la integraci√≥n con NORA")
        print("2. Verificar que el QR se muestre en el panel de NORA")
        print("3. Escanear el QR con WhatsApp Web real")
        print("4. Probar el env√≠o de mensajes")
    else:
        print("‚ùå El backend tiene problemas. Acciones sugeridas:")
        print("1. Revisa los logs de Railway")
        print("2. Verifica que el build se complet√≥ correctamente")
        print("3. Confirma que Chrome se instal√≥ correctamente")
        print("4. Revisa las variables de entorno")
    
    check_railway_logs()

if __name__ == "__main__":
    main()
