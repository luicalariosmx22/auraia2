#!/usr/bin/env python3
"""
üß™ Test de confirmaciones numeradas en vivo
Simula el flujo completo: consulta ambigua -> confirmaci√≥n -> respuesta num√©rica
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_flujo_confirmacion_completo():
    """Test del flujo completo de confirmaci√≥n"""
    print("üîÑ TEST FLUJO CONFIRMACI√ìN COMPLETO")
    print("=" * 50)
    
    try:
        from clientes.aura.utils.consultor_tareas import procesar_consulta_tareas
        from clientes.aura.utils.gestor_estados import tiene_confirmacion_pendiente, limpiar_confirmacion_tareas
        
        # Usuario de prueba (superadmin)
        usuario_admin = {
            'id': 1,
            'nombre_completo': 'Admin Test',
            'telefono': '+56900000001',
            'email': 'admin@test.com',
            'rol': 'superadmin',
            'is_active': True,
            'cliente_id': 1
        }
        
        telefono_test = "+5214424081236"
        
        # Limpiar estado previo
        limpiar_confirmacion_tareas(telefono_test)
        print(f"üßπ Estado inicial limpio: {not tiene_confirmacion_pendiente(telefono_test)}")
        
        print("\nüìù PASO 1: Consulta ambigua que deber√≠a generar confirmaci√≥n")
        print("-" * 40)
        
        # Esta consulta deber√≠a encontrar m√∫ltiples empresas "Suspiros" 
        resultado1 = procesar_consulta_tareas(
            "tareas de suspiros pastelerias",
            usuario_admin, 
            telefono_test, 
            "aura"
        )
        
        print(f"Resultado 1: {resultado1}")
        pendiente_despues = tiene_confirmacion_pendiente(telefono_test)
        print(f"¬øConfirmaci√≥n pendiente despu√©s? {pendiente_despues}")
        
        if pendiente_despues:
            print("\n‚úÖ CONFIRMACI√ìN GENERADA CORRECTAMENTE")
            
            print("\nüìù PASO 2: Respuesta num√©rica del usuario")
            print("-" * 40)
            
            # Usuario responde con "2" 
            resultado2 = procesar_consulta_tareas(
                "2",
                usuario_admin,
                telefono_test,
                "aura"
            )
            
            print(f"Resultado 2: {resultado2}")
            pendiente_final = tiene_confirmacion_pendiente(telefono_test)
            print(f"¬øConfirmaci√≥n pendiente al final? {pendiente_final}")
            
            if not pendiente_final and resultado2 and "tareas" in resultado2.lower():
                print("\nüéâ ¬°CONFIRMACI√ìN PROCESADA EXITOSAMENTE!")
                print("‚úÖ El usuario respondi√≥ '2' y obtuvo las tareas correspondientes")
                return True
            else:
                print("\n‚ùå La confirmaci√≥n no se proces√≥ correctamente")
                return False
        else:
            print("\n‚ùå No se gener√≥ confirmaci√≥n cuando deber√≠a haberlo hecho")
            
            # Verificar si encontr√≥ resultado √∫nico
            if resultado1 and "üìã" in resultado1:
                print("‚ÑπÔ∏è Parece que encontr√≥ un resultado √∫nico directamente")
                print("‚ÑπÔ∏è Esto significa que la b√∫squeda fue m√°s espec√≠fica de lo esperado")
                return True
            
            return False
        
    except Exception as e:
        print(f"‚ùå Error en test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_casos_borde():
    """Test de casos especiales"""
    print("\nüéØ TEST CASOS BORDE")
    print("=" * 30)
    
    try:
        from clientes.aura.utils.consultor_tareas import procesar_consulta_tareas
        from clientes.aura.utils.gestor_estados import limpiar_confirmacion_tareas
        
        usuario_admin = {
            'id': 1,
            'nombre_completo': 'Admin Test',
            'telefono': '+56900000001',
            'email': 'admin@test.com',
            'rol': 'superadmin',
            'is_active': True,
            'cliente_id': 1
        }
        
        telefono_test = "+5214424081237"
        limpiar_confirmacion_tareas(telefono_test)
        
        print("\n1Ô∏è‚É£ Respuesta num√©rica sin confirmaci√≥n pendiente:")
        resultado = procesar_consulta_tareas("2", usuario_admin, telefono_test, "aura")
        print(f"   Resultado: {resultado}")
        print(f"   ‚úÖ Deber√≠a retornar None (no es consulta de tareas): {resultado is None}")
        
        print("\n2Ô∏è‚É£ Respuesta con n√∫mero inv√°lido (despu√©s de confirmaci√≥n):")
        # Primero generar confirmaci√≥n
        procesar_consulta_tareas("tareas de suspiros", usuario_admin, telefono_test, "aura")
        # Luego respuesta inv√°lida
        resultado = procesar_consulta_tareas("99", usuario_admin, telefono_test, "aura")
        print(f"   Resultado: {resultado}")
        print(f"   ‚úÖ Deber√≠a mostrar error: {'No pude identificar' in str(resultado)}")
        
        print("\n3Ô∏è‚É£ Respuesta no num√©rica despu√©s de confirmaci√≥n:")
        limpiar_confirmacion_tareas(telefono_test)
        procesar_consulta_tareas("tareas de suspiros", usuario_admin, telefono_test, "aura")
        resultado = procesar_consulta_tareas("hola", usuario_admin, telefono_test, "aura")
        print(f"   Resultado: {resultado}")
        print(f"   ‚úÖ Deber√≠a mostrar error: {'No pude identificar' in str(resultado)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en casos borde: {e}")
        return False

def main():
    """Ejecuta todos los tests de confirmaci√≥n"""
    print("üöÄ TESTS DE CONFIRMACIONES EN VIVO")
    print("=" * 60)
    
    tests = [
        ("Flujo Completo", test_flujo_confirmacion_completo),
        ("Casos Borde", test_casos_borde)
    ]
    
    resultados = []
    for nombre, test_func in tests:
        try:
            resultado = test_func()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚ùå Error en {nombre}: {e}")
            resultados.append((nombre, False))
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN FINAL:")
    
    exitos = 0
    for nombre, resultado in resultados:
        status = "‚úÖ √âXITO" if resultado else "‚ùå FALLO"
        print(f"   {status}: {nombre}")
        if resultado:
            exitos += 1
    
    print(f"\nüéØ TOTAL: {exitos}/{len(tests)} tests exitosos")
    
    if exitos == len(tests):
        print("\nüéâ ¬°SISTEMA DE CONFIRMACIONES FUNCIONANDO!")
        print("üí° El flujo completo funciona: consulta -> confirmaci√≥n -> selecci√≥n")
    else:
        print("\n‚ö†Ô∏è Algunos tests fallaron, revisar implementaci√≥n")

if __name__ == "__main__":
    main()
