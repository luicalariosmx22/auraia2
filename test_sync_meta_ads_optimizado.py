#!/usr/bin/env python3
"""
Script de prueba para verificar las optimizaciones en la sincronizaci√≥n de Meta Ads.
Este script simula una sincronizaci√≥n peque√±a para validar que no hay cuelgues.
"""

import sys
import os
from datetime import datetime, timedelta

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_sincronizacion_meta_ads():
    """
    Prueba la sincronizaci√≥n de Meta Ads con un rango peque√±o de fechas.
    """
    try:
        # Importar la funci√≥n de sincronizaci√≥n
        from clientes.aura.routes.reportes_meta_ads.estadisticas import sincronizar_anuncios_meta_ads
        
        print("="*60)
        print("PRUEBA DE SINCRONIZACI√ìN META ADS OPTIMIZADA")
        print("="*60)
        
        # Configurar fechas de prueba (√∫ltimos 3 d√≠as para que sea r√°pido)
        fecha_fin = datetime.utcnow().date()
        fecha_inicio = fecha_fin - timedelta(days=2)
        
        print(f"Fechas de prueba: {fecha_inicio} a {fecha_fin}")
        print(f"Iniciando sincronizaci√≥n a las: {datetime.now().strftime('%H:%M:%S')}")
        
        # Ejecutar sincronizaci√≥n
        inicio_tiempo = datetime.now()
        resultado = sincronizar_anuncios_meta_ads(fecha_inicio, fecha_fin)
        fin_tiempo = datetime.now()
        
        duracion = fin_tiempo - inicio_tiempo
        
        print(f"Sincronizaci√≥n completada a las: {fin_tiempo.strftime('%H:%M:%S')}")
        print(f"Duraci√≥n total: {duracion.total_seconds():.2f} segundos")
        
        if resultado:
            print(f"Anuncios procesados: {resultado.get('procesados', 0)}")
            print(f"Cuentas sin anuncios: {len(resultado.get('sin_anuncios', []))}")
            
            if resultado.get('sin_anuncios'):
                print("Cuentas sin anuncios:")
                for cuenta in resultado['sin_anuncios']:
                    print(f"  - {cuenta.get('nombre_cliente')} (ID: {cuenta.get('id_cuenta_publicitaria')})")
        else:
            print("ERROR: La sincronizaci√≥n retorn√≥ None o fall√≥")
            return False
        
        print("\n‚úÖ PRUEBA COMPLETADA EXITOSAMENTE")
        print(f"‚úÖ No se detectaron cuelgues ni timeouts")
        print(f"‚úÖ Tiempo de ejecuci√≥n: {duracion.total_seconds():.2f}s")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LA PRUEBA: {e}")
        import traceback
        traceback.print_exc()
        return False

def verificar_configuracion():
    """
    Verifica que las variables de entorno est√©n configuradas correctamente.
    """
    print("Verificando configuraci√≥n...")
    
    # Verificar META_ACCESS_TOKEN
    if not os.environ.get('META_ACCESS_TOKEN'):
        print("‚ùå ERROR: META_ACCESS_TOKEN no configurado")
        return False
    else:
        token = os.environ.get('META_ACCESS_TOKEN')
        print(f"‚úÖ META_ACCESS_TOKEN configurado (primeros 10 chars: {token[:10]}...)")
    
    # Verificar conexi√≥n a Supabase
    try:
        from clientes.aura.utils.supabase_client import supabase
        result = supabase.table('meta_ads_cuentas').select('count', count='exact').limit(1).execute()
        print(f"‚úÖ Conexi√≥n a Supabase OK (cuentas encontradas: {result.count})")
    except Exception as e:
        print(f"‚ùå ERROR en conexi√≥n a Supabase: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("SCRIPT DE PRUEBA - SINCRONIZACI√ìN META ADS OPTIMIZADA")
    print("Este script verificar√° que las optimizaciones funcionen correctamente")
    print("-" * 60)
    
    # Verificar configuraci√≥n
    if not verificar_configuracion():
        print("‚ùå Configuraci√≥n incorrecta, abortando prueba")
        sys.exit(1)
    
    # Ejecutar prueba
    exito = test_sincronizacion_meta_ads()
    
    if exito:
        print("\nüéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE")
        print("El sistema de sincronizaci√≥n optimizado est√° funcionando correctamente")
        sys.exit(0)
    else:
        print("\nüí• FALL√ì LA PRUEBA")
        print("Revisar los logs para identificar problemas")
        sys.exit(1)
