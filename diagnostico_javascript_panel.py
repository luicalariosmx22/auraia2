#!/usr/bin/env python3
"""
Diagnostico JavaScript del panel WhatsApp Web
"""

import requests
import re

def test_javascript_panel():
    """Test del JavaScript del panel"""
    
    print("üîß DIAGN√ìSTICO JAVASCRIPT PANEL WHATSAPP")
    print("="*50)
    
    base_url = "http://localhost:5000"
    whatsapp_url = f"{base_url}/panel_cliente/aura/whatsapp"
    
    print("üì° Obteniendo HTML del panel...")
    
    try:
        response = requests.get(whatsapp_url, timeout=10)
        
        if response.status_code != 200:
            print(f"‚ùå Error: Status {response.status_code}")
            return
        
        html = response.text
        print(f"‚úÖ HTML obtenido ({len(html)} chars)")
        
        # Verificar dependencias JavaScript
        dependencias = [
            ('jQuery', r'jquery'),
            ('Bootstrap', r'bootstrap'),
            ('Toastr', r'toastr'),
            ('QRCode.js', r'qrcode'),
            ('FontAwesome', r'fontawesome|fas fa-')
        ]
        
        print("\nüìö Verificando dependencias JavaScript:")
        for nombre, patron in dependencias:
            if re.search(patron, html, re.IGNORECASE):
                print(f"   ‚úÖ {nombre} encontrado")
            else:
                print(f"   ‚ùå {nombre} NO encontrado")
        
        # Verificar funciones JavaScript espec√≠ficas
        funciones = [
            'startWhatsAppFlow',
            'refreshQR',
            'displayQR',
            'connectToBackend',
            'addLog'
        ]
        
        print("\nüîß Verificando funciones JavaScript:")
        for funcion in funciones:
            if f"function {funcion}" in html:
                print(f"   ‚úÖ {funcion}() definida")
            else:
                print(f"   ‚ùå {funcion}() NO encontrada")
        
        # Verificar variables del template
        variables = [
            ('nombreNora', r'const nombreNora = "([^"]+)"'),
            ('backendUrl', r'const backendUrl = "([^"]+)"')
        ]
        
        print("\nüìã Verificando variables del template:")
        for nombre, patron in variables:
            match = re.search(patron, html)
            if match:
                valor = match.group(1)
                print(f"   ‚úÖ {nombre} = '{valor}'")
            else:
                print(f"   ‚ùå {nombre} NO definida")
        
        # Verificar elementos DOM cr√≠ticos
        elementos = [
            ('btn btn-success btn-lg', 'Bot√≥n Flujo Autom√°tico'),
            ('id="qr-container"', 'Contenedor QR'),
            ('id="activity-logs"', 'Contenedor Logs'),
            ('onclick="startWhatsAppFlow()"', 'Event Handler Flujo Autom√°tico')
        ]
        
        print("\nüéØ Verificando elementos DOM:")
        for selector, descripcion in elementos:
            if selector in html:
                print(f"   ‚úÖ {descripcion}")
            else:
                print(f"   ‚ùå {descripcion} NO encontrado")
        
        # Buscar posibles errores en el template
        print("\nüîç Buscando posibles errores:")
        
        # Variables sin interpolar
        sin_interpolar = re.findall(r'\{\{\s*(\w+)\s*\}\}', html)
        if sin_interpolar:
            print(f"   ‚ö†Ô∏è Variables sin interpolar: {sin_interpolar}")
        else:
            print(f"   ‚úÖ Todas las variables interpoladas correctamente")
        
        # Errores de sintaxis JavaScript comunes
        errores_js = [
            (r'function\s+\w+\([^)]*\)\s*{[^}]*$', 'Funci√≥n sin cerrar'),
            (r'\.then\([^)]*$', 'Promise sin cerrar'),
            (r'console\.log\([^)]*$', 'Console.log sin cerrar')
        ]
        
        for patron, descripcion in errores_js:
            if re.search(patron, html, re.MULTILINE):
                print(f"   ‚ö†Ô∏è Posible error: {descripcion}")
        
        print("\nüìÑ Verificando estructura del HTML...")
        
        # Verificar que el template se extiende correctamente
        if '{% extends' in html:
            print("   ‚ö†Ô∏è Template no procesado - contiene tags Django/Jinja")
        elif '<html' in html and '</html>' in html:
            print("   ‚úÖ HTML completo renderizado")
        else:
            print("   ‚ùå HTML incompleto")
        
        # Verificar scripts al final
        scripts = re.findall(r'<script[^>]*>(.*?)</script>', html, re.DOTALL)
        print(f"   üìù Scripts encontrados: {len(scripts)}")
        
        for i, script in enumerate(scripts):
            if 'startWhatsAppFlow' in script:
                print(f"   ‚úÖ Script {i+1}: Contiene l√≥gica principal")
            elif script.strip().startswith('http'):
                print(f"   üìö Script {i+1}: Biblioteca externa")
            elif len(script.strip()) > 100:
                print(f"   üîß Script {i+1}: C√≥digo personalizado ({len(script)} chars)")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    test_javascript_panel()
