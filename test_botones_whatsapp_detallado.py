#!/usr/bin/env python3
"""
Script para probar cada bot√≥n del panel WhatsApp Web detalladamente
"""

import requests
import json
import time
import sys

# Configuraci√≥n
BASE_URL = "http://localhost:5000"
CLIENTE = "aura"
WHATSAPP_URL = f"{BASE_URL}/panel_cliente/{CLIENTE}/whatsapp"

def test_endpoint(endpoint, method="GET", data=None, description=""):
    """Probar un endpoint espec√≠fico"""
    try:
        url = f"{WHATSAPP_URL}{endpoint}"
        print(f"\nüîç Testing: {description}")
        print(f"üì° {method} {url}")
        
        if method == "POST":
            response = requests.post(url, json=data or {}, headers={'Content-Type': 'application/json'})
        else:
            response = requests.get(url)
        
        print(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                print(f"‚úÖ Response: {json.dumps(result, indent=2)}")
                return True, result
            except:
                print(f"‚úÖ Response (HTML): {response.text[:200]}...")
                return True, response.text
        else:
            print(f"‚ùå Error: {response.status_code}")
            print(f"‚ùå Response: {response.text[:500]}...")
            return False, None
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return False, None

def main():
    """Probar todos los botones del panel"""
    print("üß™ PRUEBA DETALLADA DE BOTONES WHATSAPP WEB")
    print("=" * 60)
    
    # 1. Probar acceso al panel principal
    print("\n1Ô∏è‚É£ ACCESO AL PANEL PRINCIPAL")
    success, result = test_endpoint("/", "GET", description="Dashboard principal")
    if not success:
        print("‚ùå No se puede acceder al panel principal")
        return
    
    # 2. Probar endpoint de status
    print("\n2Ô∏è‚É£ ENDPOINT DE STATUS")
    success, result = test_endpoint("/status", "GET", description="Obtener estado actual")
    if success and isinstance(result, dict):
        print("üìä Estado obtenido:")
        print(f"   - Health Status: {result.get('health_status', 'N/A')}")
        print(f"   - Client Status: {result.get('client_status', 'N/A')}")
        print(f"   - Detailed Status: {result.get('detailed_status', 'N/A')}")
    
    # 3. Probar bot√≥n CONECTAR
    print("\n3Ô∏è‚É£ BOT√ìN CONECTAR")
    success, result = test_endpoint("/connect", "POST", description="Conectar al backend")
    if success:
        print("‚úÖ Conectar: OK")
    else:
        print("‚ùå Conectar: FALLO")
    
    # 4. Probar bot√≥n INICIAR SESI√ìN
    print("\n4Ô∏è‚É£ BOT√ìN INICIAR SESI√ìN")
    success, result = test_endpoint("/init_session", "POST", description="Iniciar sesi√≥n WhatsApp")
    if success:
        print("‚úÖ Iniciar Sesi√≥n: OK")
    else:
        print("‚ùå Iniciar Sesi√≥n: FALLO")
    
    # 5. Probar bot√≥n GENERAR QR
    print("\n5Ô∏è‚É£ BOT√ìN GENERAR QR")
    success, result = test_endpoint("/qr", "GET", description="Obtener c√≥digo QR")
    if success:
        print("‚úÖ Generar QR: OK")
        if isinstance(result, dict) and result.get('qr_data'):
            print(f"üì± QR Data: {result['qr_data'][:50]}...")
    else:
        print("‚ùå Generar QR: FALLO")
    
    # 6. Probar bot√≥n FLUJO AUTOM√ÅTICO
    print("\n6Ô∏è‚É£ BOT√ìN FLUJO AUTOM√ÅTICO")
    success, result = test_endpoint("/get_qr_auto", "POST", description="Flujo autom√°tico con QR")
    if success:
        print("‚úÖ Flujo Autom√°tico: OK")
        if isinstance(result, dict):
            print(f"   - Has QR: {result.get('has_qr', False)}")
            print(f"   - Authenticated: {result.get('authenticated', False)}")
            print(f"   - Message: {result.get('message', 'N/A')}")
    else:
        print("‚ùå Flujo Autom√°tico: FALLO")
    
    # 7. Probar bot√≥n VERIFICAR ESTADO
    print("\n7Ô∏è‚É£ BOT√ìN VERIFICAR ESTADO")
    success, result = test_endpoint("/check_status", "POST", description="Verificar estado WhatsApp")
    if success:
        print("‚úÖ Verificar Estado: OK")
    else:
        print("‚ùå Verificar Estado: FALLO")
    
    # 8. Probar bot√≥n MENSAJE PRUEBA
    print("\n8Ô∏è‚É£ BOT√ìN MENSAJE PRUEBA")
    success, result = test_endpoint("/send_test", "POST", description="Enviar mensaje de prueba")
    if success:
        print("‚úÖ Mensaje Prueba: OK")
    else:
        print("‚ùå Mensaje Prueba: FALLO")
    
    # 9. Probar bot√≥n CERRAR SESI√ìN
    print("\n9Ô∏è‚É£ BOT√ìN CERRAR SESI√ìN")
    success, result = test_endpoint("/close_session", "POST", description="Cerrar sesi√≥n WhatsApp")
    if success:
        print("‚úÖ Cerrar Sesi√≥n: OK")
    else:
        print("‚ùå Cerrar Sesi√≥n: FALLO")
    
    # 10. Probar bot√≥n DESCONECTAR
    print("\nüîü BOT√ìN DESCONECTAR")
    success, result = test_endpoint("/disconnect", "POST", description="Desconectar del backend")
    if success:
        print("‚úÖ Desconectar: OK")
    else:
        print("‚ùå Desconectar: FALLO")
    
    print("\n" + "=" * 60)
    print("üèÅ PRUEBA COMPLETADA")
    
    # Verificar conectividad al backend Railway
    print("\nüåê VERIFICANDO BACKEND RAILWAY")
    try:
        response = requests.get("https://whatsapp-server-production-8f61.up.railway.app/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Backend Railway: FUNCIONANDO")
        else:
            print(f"‚ö†Ô∏è Backend Railway: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Backend Railway: ERROR - {e}")

if __name__ == "__main__":
    main()
