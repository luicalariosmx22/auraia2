// üß™ SCRIPT DE PRUEBA - Prevenci√≥n de Duplicaci√≥n de Conocimiento
console.log('üß™ INICIANDO PRUEBA DE DUPLICACI√ìN...');
console.log('============================================');

// 1. Verificar estado inicial
console.log('\n1Ô∏è‚É£ VERIFICANDO ESTADO INICIAL:');
console.log('   eventosConfigurados:', typeof eventosConfigurados !== 'undefined' ? eventosConfigurados : 'Variable no definida');
console.log('   configurarEventosConocimiento:', typeof window.configurarEventosConocimiento);
console.log('   reinicializarEventosConocimiento:', typeof window.reinicializarEventosConocimiento);

// 2. Verificar formulario
console.log('\n2Ô∏è‚É£ VERIFICANDO FORMULARIO:');
const formulario = document.getElementById('form-agregar-conocimiento');
console.log('   Formulario encontrado:', !!formulario);

if (formulario) {
    // Verificar listeners actuales
    const listeners = getEventListeners ? getEventListeners(formulario) : 'getEventListeners no disponible';
    console.log('   Event listeners actuales:', listeners);
}

// 3. Funci√≥n de prueba para simular m√∫ltiples configuraciones
function simularConfiguracionMultiple() {
    console.log('\nüß™ SIMULANDO CONFIGURACI√ìN M√öLTIPLE...');
    
    for (let i = 1; i <= 3; i++) {
        console.log(`   Intento ${i}:`);
        if (typeof window.configurarEventosConocimiento === 'function') {
            window.configurarEventosConocimiento();
        }
    }
    
    console.log('   ‚úÖ Simulaci√≥n completada');
}

// 4. Funci√≥n de prueba para el formulario
function probarEnvioMultiple() {
    console.log('\nüìù PROBANDO ENV√çO M√öLTIPLE...');
    
    // Llenar formulario
    const contenido = document.getElementById('nuevo-contenido');
    const etiquetas = document.getElementById('nuevas-etiquetas');
    
    if (contenido && etiquetas) {
        contenido.value = 'CONTENIDO DE PRUEBA - ' + new Date().toLocaleTimeString();
        etiquetas.value = 'prueba, duplicacion, test';
        
        console.log('   üìù Formulario llenado');
        console.log('   üö® ATENCI√ìN: El siguiente env√≠o debe crear SOLO UN bloque');
        
        // Simular submit del formulario
        const formulario = document.getElementById('form-agregar-conocimiento');
        if (formulario) {
            console.log('   üöÄ Disparando evento submit...');
            formulario.dispatchEvent(new Event('submit'));
        }
    } else {
        console.log('   ‚ùå Campos del formulario no encontrados');
    }
}

// 5. Funci√≥n para contar bloques actuales
function contarBloques() {
    const bloques = document.querySelectorAll('.bloque-conocimiento');
    const totalElement = document.getElementById('total-bloques');
    
    console.log(`   üìä Bloques en DOM: ${bloques.length}`);
    console.log(`   üìä Total mostrado: ${totalElement ? totalElement.textContent : 'No disponible'}`);
    
    return bloques.length;
}

// 6. Funci√≥n de prueba completa
function pruebaCompleta() {
    console.log('\nüéØ EJECUTANDO PRUEBA COMPLETA...');
    
    // Contar bloques antes
    console.log('\nüìä ANTES del env√≠o:');
    const bloquesAntes = contarBloques();
    
    // Simular configuraci√≥n m√∫ltiple
    simularConfiguracionMultiple();
    
    // Probar env√≠o
    probarEnvioMultiple();
    
    // Esperar y contar despu√©s
    setTimeout(() => {
        console.log('\nüìä DESPU√âS del env√≠o (despu√©s de 3 segundos):');
        const bloquesDespues = contarBloques();
        
        const diferencia = bloquesDespues - bloquesAntes;
        console.log(`\nüéØ RESULTADO:`);
        console.log(`   Bloques agregados: ${diferencia}`);
        
        if (diferencia === 1) {
            console.log('   ‚úÖ √âXITO: Solo se agreg√≥ 1 bloque (sin duplicaci√≥n)');
        } else if (diferencia > 1) {
            console.log(`   ‚ùå PROBLEMA: Se agregaron ${diferencia} bloques (duplicaci√≥n detectada)`);
        } else {
            console.log('   ‚ö†Ô∏è  No se agregaron bloques (posible error en el env√≠o)');
        }
        
    }, 3000);
}

// 7. Funci√≥n para reinicializar en caso de problemas
function limpiarYReinicializar() {
    console.log('\nüßπ LIMPIANDO Y REINICIALIZANDO...');
    
    if (typeof window.reinicializarEventosConocimiento === 'function') {
        window.reinicializarEventosConocimiento();
        console.log('   ‚úÖ Eventos reinicializados');
    } else {
        console.log('   ‚ùå reinicializarEventosConocimiento no disponible');
    }
}

// Exportar funciones de prueba
window.simularConfiguracionMultiple = simularConfiguracionMultiple;
window.probarEnvioMultiple = probarEnvioMultiple;
window.contarBloques = contarBloques;
window.pruebaCompleta = pruebaCompleta;
window.limpiarYReinicializar = limpiarYReinicializar;

console.log('\nüí° COMANDOS DISPONIBLES:');
console.log('   - simularConfiguracionMultiple() : Simula configuraci√≥n repetida');
console.log('   - probarEnvioMultiple()          : Prueba env√≠o del formulario');
console.log('   - contarBloques()                : Cuenta bloques actuales');
console.log('   - pruebaCompleta()               : Ejecuta prueba completa');
console.log('   - limpiarYReinicializar()        : Limpia y reinicializa eventos');

console.log('\n‚ö†Ô∏è  IMPORTANTE:');
console.log('   - Cambiar a pesta√±a "Agregar Nuevo" antes de probar');
console.log('   - El env√≠o debe crear SOLO 1 bloque, no 3');
console.log('   - Si hay problemas, ejecutar limpiarYReinicializar()');

console.log('\n============================================');
console.log('üß™ SCRIPT DE PRUEBA CARGADO');
console.log('üéØ Ejecuta pruebaCompleta() para probar');

// Auto-verificaci√≥n inicial
setTimeout(() => {
    console.log('\nüîç VERIFICACI√ìN AUTOM√ÅTICA:');
    if (typeof eventosConfigurados !== 'undefined') {
        console.log(`   Estado eventos: ${eventosConfigurados ? 'Configurados' : 'No configurados'}`);
    }
    
    const formulario = document.getElementById('form-agregar-conocimiento');
    if (formulario) {
        console.log('   ‚úÖ Formulario encontrado y listo para pruebas');
    } else {
        console.log('   ‚ö†Ô∏è  Formulario no encontrado - cambiar a pesta√±a "Agregar Nuevo"');
    }
}, 1000);
